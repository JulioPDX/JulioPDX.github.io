<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Network Automation on JulioPDX</title>
    <link>https://juliopdx.github.io/tags/network-automation/</link>
    <description>Recent content in Network Automation on JulioPDX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 12 Nov 2021 12:26:21 -0800</lastBuildDate><atom:link href="https://juliopdx.github.io/tags/network-automation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Network CI/CD Pipeline Part 6</title>
      <link>https://juliopdx.github.io/2021/11/12/building-a-network-ci/cd-pipeline-part-6/</link>
      <pubDate>Fri, 12 Nov 2021 12:26:21 -0800</pubDate>
      
      <guid>https://juliopdx.github.io/2021/11/12/building-a-network-ci/cd-pipeline-part-6/</guid>
      <description>Introduction Hello all and thank you for tuning in to the last part of the network CI/CD series. It really means a lot and I hope you have learned a bit along the way. In this post we will focus on testing after a change is made, more specifically, we will be looking at Suzieq. If you stick around until the end, we will look at maintaining a “golden state” of configuration using cron and a message from Rocky.</description>
    </item>
    
    <item>
      <title>Building a Network CI/CD Pipeline Part 5</title>
      <link>https://juliopdx.github.io/2021/11/08/building-a-network-ci/cd-pipeline-part-5/</link>
      <pubDate>Mon, 08 Nov 2021 11:58:46 -0800</pubDate>
      
      <guid>https://juliopdx.github.io/2021/11/08/building-a-network-ci/cd-pipeline-part-5/</guid>
      <description>Introduction Hello all, thank you for reading the previous posts in this series. It has been fun interacting with all of you and see a few folks taking the challenge of standing this up on their own. In this post we will go over the framework that is performing our configuration deployments, Nornir and NAPALM. I will also provide an example worklflow on how this is all tied together and executed from a network engineers perspective.</description>
    </item>
    
    <item>
      <title>Building a Network CI/CD Pipeline Part 4</title>
      <link>https://juliopdx.github.io/2021/10/31/building-a-network-ci/cd-pipeline-part-4/</link>
      <pubDate>Sun, 31 Oct 2021 11:26:48 -0800</pubDate>
      
      <guid>https://juliopdx.github.io/2021/10/31/building-a-network-ci/cd-pipeline-part-4/</guid>
      <description>Introduction Hello everyone and thank you for checking out part four in this series. I went on vacation for a bit, but I’m glad to be back on the keys. In this post I will break down all of the steps performed before a change hits our network devices. This is important because we have the opportunity to stop incorrect or invalid configurations from ever hitting our network devices. A few steps that we will cover are: Black for code formatting, Batfish to validate configuration updates, and NAPALM dry run for testing the legitimacy of the configuration files.</description>
    </item>
    
    <item>
      <title>Building a Network CI/CD Pipeline Part 2</title>
      <link>https://juliopdx.github.io/2021/10/20/building-a-network-ci/cd-pipeline-part-2/</link>
      <pubDate>Wed, 20 Oct 2021 10:41:26 -0800</pubDate>
      
      <guid>https://juliopdx.github.io/2021/10/20/building-a-network-ci/cd-pipeline-part-2/</guid>
      <description>Introduction Thank you for checking out part two of this series. The last post went through installing docker on an Ubuntu server to begin our journey to building a CI/CD pipeline. In this post it will be all about connecting Drone to our code repository, in this case GitHub. From our reference diagram below, we will be focusing on the connections from GitHub to the Drone runners.
The Pipeline Server and Runners Now that we have docker installed, we need something to test our code or execute it.</description>
    </item>
    
    <item>
      <title>Building a Network CI/CD Pipeline Part 1</title>
      <link>https://juliopdx.github.io/2021/10/20/building-a-network-ci/cd-pipeline-part-1/</link>
      <pubDate>Wed, 20 Oct 2021 10:26:36 -0800</pubDate>
      
      <guid>https://juliopdx.github.io/2021/10/20/building-a-network-ci/cd-pipeline-part-1/</guid>
      <description>Introduction Hello all and thank you for joining me on another blog post! In this post or series of posts I hope to walk you through my journey on building a network CI/CD pipeline. This pipeline is not perfect and I’m sure there’s much more efficient ways to produce the same outcomes. I did make the choice to leave out a few things as the technologies involved and complexity kept growing.</description>
    </item>
    
    <item>
      <title>How to Generate Cisco Lifecycle Documentation With Python and APIs</title>
      <link>https://juliopdx.github.io/2021/09/23/how-to-generate-cisco-lifecycle-documentation-with-python-and-apis/</link>
      <pubDate>Thu, 23 Sep 2021 10:06:16 -0800</pubDate>
      
      <guid>https://juliopdx.github.io/2021/09/23/how-to-generate-cisco-lifecycle-documentation-with-python-and-apis/</guid>
      <description>Introduction I was recently in a Twitter conversation with a few network engineers, in that feed was great dialogue on how often folks upgrade their network environments. Whether its when a massive vulnerability hits or just keeping up with vendor recommended releases. I mentioned that the Cisco Support APIs are an incredible resource. These APIs allow users with the appropriate access to get information about their devices. This could be recommended software releases, EoX dates, last day of support, vulnerabilities, and others.</description>
    </item>
    
    <item>
      <title>Converting Network Icons for Labs With Python</title>
      <link>https://juliopdx.github.io/2021/09/17/converting-network-icons-for-labs-with-python/</link>
      <pubDate>Fri, 17 Sep 2021 09:31:09 -0800</pubDate>
      
      <guid>https://juliopdx.github.io/2021/09/17/converting-network-icons-for-labs-with-python/</guid>
      <description>Introduction First of all, the diagrams used in this post and repository were originally created by ecceman. Please head over to the original repository and show some love by giving it a star! When going through studies or testing a solution, I tend to lab a lot. On top of that I usually try and make my labs and topologies look pretty. I like to tell myself if the topology looks good, then I will learn more effectively.</description>
    </item>
    
    <item>
      <title>Integrating Nornir With FastAPI</title>
      <link>https://juliopdx.github.io/2021/09/01/integrating-nornir-with-fastapi/</link>
      <pubDate>Wed, 01 Sep 2021 18:52:28 -0800</pubDate>
      
      <guid>https://juliopdx.github.io/2021/09/01/integrating-nornir-with-fastapi/</guid>
      <description>Introduction I recently saw a fellow engineer share an amazing article on Real Python. It was a post by Sebastián Ramírez, the creator of FastAPI. I’m fairly comfortable working with APIs but I’ve never even thought about making one. The prospect seems so daunting, especially when I’m still trying to master the foundational skills of python. FastAPI does a ton of heavy lifting to make this process incredibly easy to get started and build web APIs.</description>
    </item>
    
    <item>
      <title>Basic Network Testing With Nornir and NTC Templates</title>
      <link>https://juliopdx.github.io/2021/08/15/basic-network-testing-with-nornir-and-ntc-templates/</link>
      <pubDate>Sun, 15 Aug 2021 11:12:03 -0800</pubDate>
      
      <guid>https://juliopdx.github.io/2021/08/15/basic-network-testing-with-nornir-and-ntc-templates/</guid>
      <description>Introduction Hello everyone and thank you for checking out another blog post. This time looking at testing the network. In my previous post, I mentioned testing could be a really neat and much needed addition to the code base. I had some spare time this weekend and couldn’t wait. Ill be honest, I consider myself a novice in python and programming in general. There is definitely many ways to accomplish a task and I’m sure there are plenty of more efficient ways to perform the actions I&amp;rsquo;ll share with you.</description>
    </item>
    
    <item>
      <title>Automating MPLS L3VPNs With Nornir</title>
      <link>https://juliopdx.github.io/2021/08/14/automating-mpls-l3vpns-with-nornir/</link>
      <pubDate>Sat, 14 Aug 2021 10:38:25 -0800</pubDate>
      
      <guid>https://juliopdx.github.io/2021/08/14/automating-mpls-l3vpns-with-nornir/</guid>
      <description>Introduction Hello all and thank you for checking out another one of my blog posts. It really means a lot. I recently completed the Cisco ENARSI exam after a few months of studying. It was honestly pretty difficult for me but the pass was worth it! I may have to write a blog post on studying for and passing that exam. In this post I will break down how I automated some parts of an MPLS L3VPN deployment.</description>
    </item>
    
    <item>
      <title>Automating Multi Vendor Environments With Netmiko</title>
      <link>https://juliopdx.github.io/2021/04/02/automating-multi-vendor-environments-with-netmiko/</link>
      <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://juliopdx.github.io/2021/04/02/automating-multi-vendor-environments-with-netmiko/</guid>
      <description>Introduction Hello again! I was working through Nick Russos’ awesome Automating Networks with Python course on Pluralsight, check it out HERE. In the course, Nick does a great job of breaking down the code and the functionality of each bit. I’m still doing a lot of leaning in Python so please bear with me.
The course uses an MPLS environment as an example of network automation with Python. I decided to use the principles taught in the Netmiko portion of the course to try and automate some OSPF between multiple vendors.</description>
    </item>
    
    <item>
      <title>Network Validation With Nornir &amp; Napalm</title>
      <link>https://juliopdx.github.io/2021/02/27/network-validation-with-nornir-napalm/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://juliopdx.github.io/2021/02/27/network-validation-with-nornir-napalm/</guid>
      <description>Intro I wanted to get my feet wet with Nornir/NAPALM and Python network automation in general. One simple goal to start with in network automation is validating configurations or deploying “show commands” and returning some kind of useful information. I wanted to start with something very simple, as easy wins make me want to keep progressing. In this post I will break down how I validate SNMP information on network devices using Nornir and NAPALM.</description>
    </item>
    
    <item>
      <title>Creating List of IP Addresses With Ansible Filter Plugin</title>
      <link>https://juliopdx.github.io/2021/02/02/creating-list-of-ip-addresses-with-ansible-filter-plugin/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://juliopdx.github.io/2021/02/02/creating-list-of-ip-addresses-with-ansible-filter-plugin/</guid>
      <description>Intro I recently had a use case where I needed a list of IP addresses from a prefix. My first step was to go through Ansible documentation on current filters to see if something would match my need. Long story short, there wasn’t. At least, nothing I could find which honestly is probably a huge possibility, and in that case this post is pointless. Ansible does have IP address filters but I noticed most all of the examples assume you already have a list of IP addresses to pass to the filters.</description>
    </item>
    
  </channel>
</rss>
