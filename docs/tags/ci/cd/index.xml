<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CI/CD on Welcome to the World of Tomorrow</title>
    <link>https://juliopdx.com/tags/ci/cd/</link>
    <description>Recent content in CI/CD on Welcome to the World of Tomorrow</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://juliopdx.com/tags/ci/cd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Static Website with Pulumi, YAML, MkDocs, GCP, and CI/CD</title>
      <link>https://juliopdx.com/2022/11/06/static-website-with-pulumi-yaml-mkdocs-gcp-and-ci/cd/</link>
      <pubDate>Sun, 06 Nov 2022 14:20:59 -0800</pubDate>
      
      <guid>https://juliopdx.com/2022/11/06/static-website-with-pulumi-yaml-mkdocs-gcp-and-ci/cd/</guid>
      <description>Introduction A few weeks ago, a co-worker asked the team if there was a way to convert a set of Markdown files produced from the AVD Ansible Collection to nice HTML. I then created a simple GitHub Repo that explored various ways to build HTML from Markdown. That repository is combined with the example we&amp;rsquo;ll walk through in this blog.
I then went down the rabbit hole of getting a static site deployed in the various Clouds.</description>
    </item>
    
    <item>
      <title>Building a Network CI/CD Pipeline Part 6</title>
      <link>https://juliopdx.com/2021/11/12/building-a-network-ci/cd-pipeline-part-6/</link>
      <pubDate>Fri, 12 Nov 2021 12:26:21 -0800</pubDate>
      
      <guid>https://juliopdx.com/2021/11/12/building-a-network-ci/cd-pipeline-part-6/</guid>
      <description>Introduction Hello all and thank you for tuning in to the last part of the network CI/CD series. It really means a lot and I hope you have learned a bit along the way. In this post we will focus on testing after a change is made, more specifically, we will be looking at Suzieq. If you stick around until the end, we will look at maintaining a “golden state” of configuration using cron and a message from Rocky.</description>
    </item>
    
    <item>
      <title>Building a Network CI/CD Pipeline Part 5</title>
      <link>https://juliopdx.com/2021/11/08/building-a-network-ci/cd-pipeline-part-5/</link>
      <pubDate>Mon, 08 Nov 2021 11:58:46 -0800</pubDate>
      
      <guid>https://juliopdx.com/2021/11/08/building-a-network-ci/cd-pipeline-part-5/</guid>
      <description>Introduction Hello all, thank you for reading the previous posts in this series. It has been fun interacting with all of you and see a few folks taking the challenge of standing this up on their own. In this post we will go over the framework that is performing our configuration deployments, Nornir and NAPALM. I will also provide an example worklflow on how this is all tied together and executed from a network engineers perspective.</description>
    </item>
    
    <item>
      <title>Building a Network CI/CD Pipeline Part 4</title>
      <link>https://juliopdx.com/2021/10/31/building-a-network-ci/cd-pipeline-part-4/</link>
      <pubDate>Sun, 31 Oct 2021 11:26:48 -0800</pubDate>
      
      <guid>https://juliopdx.com/2021/10/31/building-a-network-ci/cd-pipeline-part-4/</guid>
      <description>Introduction Hello everyone and thank you for checking out part four in this series. I went on vacation for a bit, but I’m glad to be back on the keys. In this post I will break down all of the steps performed before a change hits our network devices. This is important because we have the opportunity to stop incorrect or invalid configurations from ever hitting our network devices. A few steps that we will cover are: Black for code formatting, Batfish to validate configuration updates, and NAPALM dry run for testing the legitimacy of the configuration files.</description>
    </item>
    
    <item>
      <title>Building a Network CI/CD Pipeline Part 3</title>
      <link>https://juliopdx.com/2021/10/20/building-a-network-ci/cd-pipeline-part-3/</link>
      <pubDate>Wed, 20 Oct 2021 11:05:49 -0800</pubDate>
      
      <guid>https://juliopdx.com/2021/10/20/building-a-network-ci/cd-pipeline-part-3/</guid>
      <description>Introduction Thank you for checking out part three in this series, it really means a lot! So far we have installed Docker on an Ubuntu host machine and the Drone server/runners. In this post we will go over the .drone.yml file and why I decided to create my first Docker container image. Stick around after the break…. who am I kidding there is no break, what is this an infomercial?</description>
    </item>
    
    <item>
      <title>Building a Network CI/CD Pipeline Part 2</title>
      <link>https://juliopdx.com/2021/10/20/building-a-network-ci/cd-pipeline-part-2/</link>
      <pubDate>Wed, 20 Oct 2021 10:41:26 -0800</pubDate>
      
      <guid>https://juliopdx.com/2021/10/20/building-a-network-ci/cd-pipeline-part-2/</guid>
      <description>Introduction Thank you for checking out part two of this series. The last post went through installing docker on an Ubuntu server to begin our journey to building a CI/CD pipeline. In this post it will be all about connecting Drone to our code repository, in this case GitHub. From our reference diagram below, we will be focusing on the connections from GitHub to the Drone runners.
The Pipeline Server and Runners Now that we have docker installed, we need something to test our code or execute it.</description>
    </item>
    
    <item>
      <title>Building a Network CI/CD Pipeline Part 1</title>
      <link>https://juliopdx.com/2021/10/20/building-a-network-ci/cd-pipeline-part-1/</link>
      <pubDate>Wed, 20 Oct 2021 10:26:36 -0800</pubDate>
      
      <guid>https://juliopdx.com/2021/10/20/building-a-network-ci/cd-pipeline-part-1/</guid>
      <description>Introduction Hello all and thank you for joining me on another blog post! In this post or series of posts I hope to walk you through my journey on building a network CI/CD pipeline. This pipeline is not perfect and I’m sure there’s much more efficient ways to produce the same outcomes. I did make the choice to leave out a few things as the technologies involved and complexity kept growing.</description>
    </item>
    
  </channel>
</rss>
