<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on JulioPDX</title>
        <link>https://juliopdx.github.io/posts/</link>
        <description>Recent content in Posts on JulioPDX</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 15 Aug 2021 11:12:03 -0800</lastBuildDate>
        <atom:link href="https://juliopdx.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Basic Network Testing With Nornir and NTC Templates</title>
            <link>https://juliopdx.github.io/2021/08/15/basic-network-testing-with-nornir-and-ntc-templates/</link>
            <pubDate>Sun, 15 Aug 2021 11:12:03 -0800</pubDate>
            
            <guid>https://juliopdx.github.io/2021/08/15/basic-network-testing-with-nornir-and-ntc-templates/</guid>
            <description>Introduction Hello everyone and thank you for checking out another blog post. This time looking at testing the network. In my previous post, I mentioned testing could be a really neat and much needed addition to the code base. I had some spare time this weekend and couldn’t wait. Ill be honest, I consider myself a novice in python and programming in general. There is definitely many ways to accomplish a task and I’m sure there are plenty of more efficient ways to perform the actions I&amp;rsquo;ll share with you.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello everyone and thank you for checking out another blog post. This time looking at testing the network. In my previous post, I mentioned testing could be a really neat and much needed addition to the code base. I had some spare time this weekend and couldn’t wait. Ill be honest, I consider myself a novice in python and programming in general. There is definitely many ways to accomplish a task and I’m sure there are plenty of more efficient ways to perform the actions I&rsquo;ll share with you.</p>
<h2 id="the-road-to-network-testing">The Road to Network Testing</h2>
<p>Initially I wanted to incorporate pytest for this weekend project. It generally made sense and experienced folks working in python use this to test anything from simple functions to extremely large code bases. I ran into a few issues when trying to incorporate pytest. Again, I’m fairly inexperienced in this realm and I’m sure a more experienced person would not run into these issues. The main issue I had with pytest was jobs failing after the first failed assert. Even when explicitly setting the <em>–maxfail</em> option. Overall I thought working with pytest was really fun and I cant wait to dig into it more.</p>
<p>Phase two of network testing had me working with Nornir and Netmiko to send a command, set <code>use_textfsm=True</code>, and then run a few if statements to check matching configuration. I&rsquo;ll include a portion of what that looked like below.</p>
<p><code>Nornir and Netmiko</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">result <span style="color:#f92672">=</span> nornir<span style="color:#f92672">.</span>run(
    name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;GET VRF&#34;</span>,
    task<span style="color:#f92672">=</span>netmiko_send_command,
    command_string<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;show vrf&#34;</span>,
    use_textfsm<span style="color:#f92672">=</span>True,
)

<span style="color:#66d9ef">for</span> host <span style="color:#f92672">in</span> nornir<span style="color:#f92672">.</span>inventory<span style="color:#f92672">.</span>hosts<span style="color:#f92672">.</span>keys():
    vrf_parsed <span style="color:#f92672">=</span> result[host]<span style="color:#f92672">.</span>result
    list_of_vrf_values <span style="color:#f92672">=</span> [value <span style="color:#66d9ef">for</span> elem <span style="color:#f92672">in</span> vrf_parsed <span style="color:#66d9ef">for</span> value <span style="color:#f92672">in</span> elem<span style="color:#f92672">.</span>values()]

    <span style="color:#66d9ef">print</span>()

    <span style="color:#66d9ef">for</span> value <span style="color:#f92672">in</span> main_vrfs:
        <span style="color:#66d9ef">if</span> value <span style="color:#f92672">in</span> list_of_vrf_values:
            pretty(f<span style="color:#e6db74">&#34;[bold blue]{value} VRF is configured on {host}[/bold blue]&#34;</span>)
        <span style="color:#66d9ef">else</span>:
            pretty(f<span style="color:#e6db74">&#34;[bold red]{value} VRF is not configured on {host}[/bold red]&#34;</span>)
</code></pre></div><p>This approach generally worked but I had an issue in my lab. I’m not sure if it was a Netmiko issue or just my lab being weird and getting connection timeouts. In the end I decided to use Nornir with Scrapli to send the commands. Connections when using Scrapli seemed to just work, great job Carl! Once this was retrieved, I could then use the <em>parse_output</em> function from the <em>ntc_templates</em> library. Feel free to check out the repository with the test script (linked below).</p>
<h2 id="vrf-validation">VRF Validation</h2>
<p><code>Imports</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> yaml
<span style="color:#f92672">from</span> rich <span style="color:#f92672">import</span> <span style="color:#66d9ef">print</span> <span style="color:#66d9ef">as</span> pretty
<span style="color:#f92672">from</span> nornir <span style="color:#f92672">import</span> InitNornir
<span style="color:#f92672">from</span> nornir_scrapli.tasks <span style="color:#f92672">import</span> send_command
<span style="color:#f92672">from</span> ntc_templates.parse <span style="color:#f92672">import</span> parse_output
</code></pre></div><p>The imports are nothing fancy. Just importing everything we will need for the script.</p>
<ul>
<li>os – Set environemt variables during script run</li>
<li>yaml – Handle interaction with yaml stuffs</li>
<li>rich – Because rich, thanks Will</li>
<li>InitNornir- Run all the things for Nornir</li>
<li>send_command – To send commands 🙂</li>
<li>parse_output – Great library for turning output into structured data</li>
</ul>
<p><code>load yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">main_vrfs <span style="color:#f92672">=</span> []

<span style="color:#75715e"># Create list of VRFs defined in groups.yaml</span>
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;groups.yaml&#34;</span>) <span style="color:#66d9ef">as</span> f:
    data <span style="color:#f92672">=</span> yaml<span style="color:#f92672">.</span>load(f, Loader<span style="color:#f92672">=</span>yaml<span style="color:#f92672">.</span>FullLoader)[<span style="color:#e6db74">&#34;pe&#34;</span>][<span style="color:#e6db74">&#34;data&#34;</span>][<span style="color:#e6db74">&#34;vrfs&#34;</span>]
    <span style="color:#66d9ef">for</span> vrf <span style="color:#f92672">in</span> data:
        main_vrfs<span style="color:#f92672">.</span>append(vrf[<span style="color:#e6db74">&#34;name&#34;</span>])
</code></pre></div><p>I thought this was pretty slick. We are opening the <em>groups.yaml</em> file seen from the previous post. This file lists all of our VRFs to be configured on the PE devices. Why not reuse it and save some typing? Once that is done we set the VRF portion of the yaml file to a variable called <em>data</em>. After this we loop over all the VRFs and add just the name to our empty list above. Hold that thought as this list will be used later in the script.</p>
<p><code>test_vrf function intro</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">test_vrf</span>():

    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Main VRF test
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    os<span style="color:#f92672">.</span>environ[
        <span style="color:#e6db74">&#34;NET_TEXTFSM&#34;</span>
    ] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./venv/lib/python3.9/site-packages/ntc_templates/templates&#34;</span>

    nornir <span style="color:#f92672">=</span> InitNornir(config_file<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;config.yaml&#34;</span>)

    result <span style="color:#f92672">=</span> nornir<span style="color:#f92672">.</span>run(
        name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;GET VRF&#34;</span>,
        task<span style="color:#f92672">=</span>send_command,
        command<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;show vrf&#34;</span>,
    )
</code></pre></div><p>If any of you have worked with pytest, you can tell by the function naming that I was serious about incorporating it. I will in the future! Most of this has been shown in previous posts but one little difference is that <em>os.environ section</em>. When I was building this, the script couldn’t locate the <em>ntc_templates</em>. Essentially, we are just telling the script where to find the templates. You will probably have to update this for your environment.</p>
<p><code>For all the hosts</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">for</span> host <span style="color:#f92672">in</span> nornir<span style="color:#f92672">.</span>inventory<span style="color:#f92672">.</span>hosts<span style="color:#f92672">.</span>keys():
        remote_vrfs <span style="color:#f92672">=</span> []
        vrf_parsed <span style="color:#f92672">=</span> parse_output(
            platform<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;cisco_ios&#34;</span>, command<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;show vrf&#34;</span>, data<span style="color:#f92672">=</span>result[host]<span style="color:#f92672">.</span>result
        )

        <span style="color:#75715e"># Looping over all parsed VRFs to build new list</span>
        <span style="color:#66d9ef">for</span> remote_vrf <span style="color:#f92672">in</span> vrf_parsed:
            remote_vrfs<span style="color:#f92672">.</span>append(remote_vrf[<span style="color:#e6db74">&#34;name&#34;</span>])
</code></pre></div><p>I really love this about python and programming in general, what you see above is fairly basic and learned pretty early on in programming studies. But the power it can demonstrate is really neat to me. At this point in the script, all hosts have been connected to and information captured. We are using this initial for loop to loop over the data that was gathered from the <em>show vrf</em> command. We create an empty list called <em>remote_vrfs</em>, then run the <em>parse_output</em> function from the <em>ntc_templates</em> library to get data in a structured format. Once that is done we run another for loop to add VRF names gathered from PE routers to our previously empty list. At this point we now have two lists created. One for VRFs we want configured on devices and one from the actual VRFs already configured on the PE routers.</p>
<p><code>Set Theory</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        set_diff <span style="color:#f92672">=</span> set(main_vrfs) <span style="color:#f92672">-</span> set(remote_vrfs)

        <span style="color:#75715e"># If a set difference is found, print the nice red output!</span>
        <span style="color:#66d9ef">if</span> set_diff:
            pretty(
                f<span style="color:#e6db74">&#34;[bold red]The following VRFs are not configured on {host}: {set_diff [/bold red]&#34;</span>
            )
        <span style="color:#66d9ef">else</span>:
            pretty(f<span style="color:#e6db74">&#34;[bold blue]All VRF tests passed on router {host}[/bold blue]&#34;</span>)
</code></pre></div><p>Good old set theory to the rescue. I learned this a while back from a course by… who other than Nick Russo. Discrete mathematics in high school may have helped but that was way too long ago. We take the two lists we have already created, then convert them to sets. From there we just look for the difference between <em>main_vrfs</em> set and the <em>remote_vrfs</em> set. Below is an example on the interpreter of what I hope to accomplish.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">&gt;&gt;&gt;</span> main_vrfs <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;CUSTOMER_777&#34;</span>,<span style="color:#e6db74">&#34;CUSTOMER_789&#34;</span>}
<span style="color:#f92672">&gt;&gt;&gt;</span> remote_vrfs <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;CUSTOMER_777&#34;</span>,<span style="color:#e6db74">&#34;CUSTOMER_789&#34;</span>,<span style="color:#e6db74">&#34;MGMT&#34;</span>}
<span style="color:#f92672">&gt;&gt;&gt;</span> main_vrfs <span style="color:#f92672">-</span> remote_vrfs
set()
<span style="color:#f92672">&gt;&gt;&gt;</span>
</code></pre></div><h2 id="script-output">Script Output</h2>
<p><img src="/blog/images/vrf_check_working.png" alt="VRF Test Passed"></p>
<p><img src="/blog/images/vrf_check_not_working.png" alt="VRF Test Failed"></p>
<h2 id="outro-and-links">Outro and Links</h2>
<p>Thank you for staying this long. I hope you enjoyed the post and found something useful. As you can see I have a long way to go with network testing but it really is an important skill. I&rsquo;ll include some links below!</p>
<ul>
<li><a href="https://github.com/JulioPDX/auto_mpls_l3vpn">GitHub Repository</a></li>
<li><a href="https://nornir.readthedocs.io/en/latest/">Nornir</a></li>
<li><a href="https://github.com/scrapli/nornir_scrapli">Scrapli</a></li>
<li><a href="https://github.com/networktocode/ntc-templates">NTC Templates</a></li>
<li><a href="https://www.geeksforgeeks.org/python-set-difference/">Set Theory</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Automating MPLS L3VPNs With Nornir</title>
            <link>https://juliopdx.github.io/2021/08/14/automating-mpls-l3vpns-with-nornir/</link>
            <pubDate>Sat, 14 Aug 2021 10:38:25 -0800</pubDate>
            
            <guid>https://juliopdx.github.io/2021/08/14/automating-mpls-l3vpns-with-nornir/</guid>
            <description>Introduction Hello all and thank you for checking out another one of my blog posts. It really means a lot. I recently completed the Cisco ENARSI exam after a few months of studying. It was honestly pretty difficult for me but the pass was worth it! I may have to write a blog post on studying for and passing that exam. In this post I will break down how I automated some parts of an MPLS L3VPN deployment.</description>
            <content type="html"><![CDATA[<p><img src="/blog/images/auto_mpls.png" alt="Topology"></p>
<h2 id="introduction">Introduction</h2>
<p>Hello all and thank you for checking out another one of my blog posts. It really means a lot. I recently completed the Cisco ENARSI exam after a few months of studying. It was honestly pretty difficult for me but the pass was worth it! I may have to write a blog post on studying for and passing that exam. In this post I will break down how I automated some parts of an MPLS L3VPN deployment. Configuring the provider edge devices to allow connectivity between customer edge routers.</p>
<p>In serious news, that was the intro you see in those recipe websites where you just want to see the ingredients and the cooking directions but there’s a whole life story on the dish or how it came about…. well this blog post is similar! Usually when studying for an exam I tend to get tunnel vision and focus on the task at hand. That also had me dropping the love for automation a bit. One of the main points in ENARSI is learning about MPLS and more specifically MPLS L3VPNs. I had such a joy learning more about this topic and running through multiple labs to get used to the technology. I wont go too deep into MPLS in this post since I’m assuming the reader is trying to automate that exact task or is familiar with it already.</p>
<h2 id="topology-brief">Topology Brief</h2>
<p>As you can see by the featured image in this post, we have four provider edge (PE) routers and four customer edge (CE) routes. Each PE device connects to one CE device, and all PE routers connect to the provider (P) router, also acting as our BGP route reflector. You might be thinking, why the route reflector? You could run iBGP sessions between all PE devices but down the road that can lead to a lot of overhead. In this case all PE devices only have one internal BGP relationship between the P router and one external BGP peering with the CE routers. This also makes the iBGP configuration on the PE routers very cookie cutter. In this case we are pretending not to have control of the CE devices, so those will already be preconfigured. I will include the configurations on the nodes so you can see what is all preconfigured.</p>
<h2 id="ce-routers-configuration-example">Ce Routers Configuration Example</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">interface Loopback0
 ip address 172.16.1.1 255.255.255.0
!
interface Ethernet0/0
 ip address 10.0.11.2 255.255.255.0
!

router bgp <span style="color:#ae81ff">789</span>
 bgp log-neighbor-changes
 network 172.16.1.0 mask 255.255.255.0
 neighbor 10.0.11.1 remote-as <span style="color:#ae81ff">12345</span>
 neighbor 10.0.11.1 allowas-in
</code></pre></div><p>Every CE router looks very similar, one lookback interface to be advertised to the PE router and a small bit of BGP configuration. You could use different autonomous system (AS) numbers between customer routers, in this case I used the same AS for the same customer. In BGP this would introduce a loop since the router will see its own AS in the path. This design option adds the command of <em>allowas-in</em> to our BGP configuration. This feature allows a route to be received even if the routers own AS is in path.</p>
<h2 id="pe-routers-configuration-example">PE Routers Configuration Example</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">interface Ethernet0/1
 ip address 10.0.15.1 255.255.255.0
 ip ospf network point-to-point
 mpls ip
!

router ospf 1
 router-id 1.1.1.1
 network 1.1.1.1 0.0.0.0 area 0
 network 10.0.15.1 0.0.0.0 area 0
!
router bgp 12345
 bgp log-neighbor-changes
 no bgp default ipv4-unicast
 neighbor 5.5.5.5 remote-as 12345
 neighbor 5.5.5.5 update-source Loopback0
 !
 address-family ipv4
 exit-address-family
 !
 address-family vpnv4
  neighbor 5.5.5.5 activate
  neighbor 5.5.5.5 send-community extended
 exit-address-family
 !
!
</code></pre></div><p>Internally we are running OSPF to give MPLS all the paths to work with. Every PE device has essentially the same iBGP configuration towards the P router. If you look closely we are not even bringing up the peering relationship with the IPv4 address family. Only the VPNv4 address family will be used. This is due to the BGP peering only being used to distribute the VPNv4 routes across the PE routers.</p>
<h2 id="prr-router-configuration-example">P/RR Router Configuration Example</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">interface Loopback0
 ip address 5.5.5.5 255.255.255.255
!
interface Ethernet0/0
 ip address 10.0.15.5 255.255.255.0
 ip ospf network point-to-point
 mpls ip
!
interface Ethernet0/1
 ip address 10.0.25.5 255.255.255.0
 ip ospf network point-to-point
 mpls ip
!
interface Ethernet0/2
 ip address 10.0.35.5 255.255.255.0
 ip ospf network point-to-point
 mpls ip
!
interface Ethernet0/3
 ip address 10.0.45.5 255.255.255.0
 ip ospf network point-to-point
 mpls ip
!
router ospf 1
 router-id 5.5.5.5
 network 0.0.0.0 255.255.255.255 area 0
!
router bgp 12345
 bgp log-neighbor-changes
 no bgp default ipv4-unicast
 neighbor iBGP peer-group
 neighbor iBGP remote-as 12345
 neighbor iBGP update-source Loopback0
 neighbor 1.1.1.1 peer-group iBGP
 neighbor 2.2.2.2 peer-group iBGP
 neighbor 3.3.3.3 peer-group iBGP
 neighbor 4.4.4.4 peer-group iBGP
 !
 address-family ipv4
 exit-address-family
 !
 address-family vpnv4
  neighbor iBGP send-community extended
  neighbor iBGP route-reflector-client
  neighbor 1.1.1.1 activate
  neighbor 2.2.2.2 activate
  neighbor 3.3.3.3 activate
  neighbor 4.4.4.4 activate
 exit-address-family
!
</code></pre></div><p>The P router configuration does look a bit more involved but in reality its not too bad. In the case of the P router, I just advertised all the things in OSPF for simplicity. As I mentioned earlier with the PE routers, only the VPNv4 peering will be used. I created a peer group to bring down the number of commands required to make this all work.</p>
<h2 id="introduction-to-nornir">Introduction to Nornir</h2>
<p>I will break down the structure of the repository I made but I wont go too deep into details. Mainly because there’s a lot of great resources out there to check out (will link at the bottom of the post), and I want to try and keep this post some what short. Nornir is a network automation framework that is written in Python. This allows developers and engineers to build automation and tools with a very powerful programming language. This also allows individuals to easily extend the functionality of the framework to meet their needs.</p>
<p><code>config.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#f92672">inventory</span>:
  <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">SimpleInventory</span>
  <span style="color:#f92672">options</span>:
    <span style="color:#f92672">host_file</span>: <span style="color:#e6db74">&#34;hosts.yaml&#34;</span>
    <span style="color:#f92672">group_file</span>: <span style="color:#e6db74">&#34;groups.yaml&#34;</span>
<span style="color:#f92672">runner</span>:
  <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">threaded</span>
  <span style="color:#f92672">options</span>:
    <span style="color:#f92672">num_workers</span>: <span style="color:#ae81ff">10</span>
</code></pre></div><p>The <code>config.yaml</code> file is pretty important in Nornir. In the sample above we are using the <code>SimpleInventory</code> plugin and specifying where the host and group files are located. I am using 10 workers but my lab is fairly small so I could have used less here.</p>
<p><code>hosts.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#f92672">PE1</span>:
  <span style="color:#f92672">hostname</span>: <span style="color:#e6db74">&#34;192.168.10.176&#34;</span>
  <span style="color:#f92672">groups</span>:
    - <span style="color:#ae81ff">pe</span>
  <span style="color:#f92672">data</span>:
    <span style="color:#f92672">interfaces</span>:
      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Ethernet0/0</span>
        <span style="color:#f92672">vrf</span>: <span style="color:#ae81ff">CUSTOMER_789</span>
        <span style="color:#f92672">ip</span>: <span style="color:#ae81ff">10.0.11.1</span><span style="color:#ae81ff">/24</span>
    <span style="color:#f92672">bgp</span>:
      <span style="color:#f92672">neighbors</span>:
        - <span style="color:#f92672">vrf_name</span>: <span style="color:#ae81ff">CUSTOMER_789</span>
          <span style="color:#f92672">remote_ip</span>: <span style="color:#ae81ff">10.0.11.2</span>
          <span style="color:#f92672">remote_as</span>: <span style="color:#ae81ff">789</span>
</code></pre></div><p>I included the setup for our PE1 router, the rest follow a similar structure. Anything host specific I set at the <code>host.yaml</code> file and anything group specific is set at the <code>groups.yaml</code> file you will see shortly. I assign all PE routers to the <code>pe</code> group and set certain interface parameters as well as BGP information that will be used in the future.</p>
<p><code>groups.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#f92672">pe</span>:
  <span style="color:#f92672">platform</span>: <span style="color:#ae81ff">ios</span>
  <span style="color:#f92672">username</span>: <span style="color:#ae81ff">cisco</span>
  <span style="color:#f92672">password</span>: <span style="color:#ae81ff">cisco</span>
  <span style="color:#f92672">data</span>:
    <span style="color:#f92672">vrfs</span>:
      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">CUSTOMER_789</span>
        <span style="color:#f92672">rd</span>: <span style="color:#e6db74">&#34;789:1&#34;</span>
        <span style="color:#f92672">rt_import</span>: <span style="color:#e6db74">&#34;789:1&#34;</span>
        <span style="color:#f92672">rt_export</span>: <span style="color:#e6db74">&#34;789:1&#34;</span>

      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">CUSTOMER_777</span>
        <span style="color:#f92672">rd</span>: <span style="color:#e6db74">&#34;777:1&#34;</span>
        <span style="color:#f92672">rt_import</span>: <span style="color:#e6db74">&#34;777:1&#34;</span>
        <span style="color:#f92672">rt_export</span>: <span style="color:#e6db74">&#34;777:1&#34;</span>
</code></pre></div><p>The groups file is pretty neat, since all of my routers are part of the pe group and have a similar platform as well as authentication parameters, I decided to include all of that information under the group. In this automation example I wanted all VRFs to be included on all PE routers. Therefore I also added the VRF information under the group file vs under the host data.</p>
<h2 id="breaking-down-script">Breaking Down Script</h2>
<p><code>l3vpn_deploy.py snippet</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> nornir <span style="color:#f92672">import</span> InitNornir
<span style="color:#f92672">from</span> nornir_scrapli.tasks <span style="color:#f92672">import</span> send_configs
<span style="color:#f92672">from</span> nornir_jinja2.plugins.tasks <span style="color:#f92672">import</span> template_file
<span style="color:#f92672">from</span> nornir_napalm.plugins.tasks <span style="color:#f92672">import</span> napalm_get
<span style="color:#f92672">from</span> nornir_utils.plugins.tasks.files <span style="color:#f92672">import</span> write_file
<span style="color:#f92672">from</span> nornir_utils.plugins.functions <span style="color:#f92672">import</span> print_result
<span style="color:#f92672">from</span> net_utils <span style="color:#f92672">import</span> address, mask
</code></pre></div><p>The portion above is essentially importing any tasks or functions we will need to run Nornir. Whether its importing <em>InitNornir</em> or plugins used to connect to devices and send commands. To learn more about plugins that can be used with Nornir please check out the <a href="https://nornir.tech/nornir/plugins/">nornir.tech</a> site.</p>
<p><code>l3vpn_deploy.py snippet</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():

    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Main that calls l3vpn function
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>

    nornir <span style="color:#f92672">=</span> InitNornir(config_file<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;config.yaml&#34;</span>)
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;Nornir initialized with the following hosts:</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
    <span style="color:#66d9ef">for</span> host <span style="color:#f92672">in</span> nornir<span style="color:#f92672">.</span>inventory<span style="color:#f92672">.</span>hosts<span style="color:#f92672">.</span>keys():
        <span style="color:#66d9ef">print</span>(f<span style="color:#e6db74">&#34;{host}</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)

    result <span style="color:#f92672">=</span> nornir<span style="color:#f92672">.</span>run(task<span style="color:#f92672">=</span>l3vpn)

    print_result(result)
</code></pre></div><p>This portion of the script is our <code>main</code> function and essentially kicks off all the other portions of our script to execute. Nornir is initialized with our <code>config.yaml</code> file that includes information about our hosts, groups, and connection parameters. There is a simple print statement at the bottom to let the operator know what inventory was just initialized for this job run. We will call on the <code>l3vpn</code> function that is defined towards the top of the script that I will walk through in a bit.</p>
<h2 id="creating-the-l3vpns">Creating the L3VPNs</h2>
<p>We will need the following items on our PE routers to complete our L3VPN build:</p>
<ul>
<li>Customer VRFs created with RD and RTs</li>
<li>Assign VRF to interface facing customer router</li>
<li>Configure BGP relationship between PE and CE device under new VRF</li>
</ul>
<p>Now that we have the main portions required for our build, it was just a matter of converting the manual configurations into simple Jinja templates. I will spare you from reading about every task since they all follow the same pattern; create commands from Jinja template, split commands, send commands to PE routers. Here is a snippet below of what I mean.</p>
<p><code>l3vpn_deploy.py snippet</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">l3vpn</span>(task):

    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Main function built for L3VPN deployment tasks
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    task1_result <span style="color:#f92672">=</span> task<span style="color:#f92672">.</span>run(
        name<span style="color:#f92672">=</span>f<span style="color:#e6db74">&#34;{task.host.name}: Creating VRFs Configuration&#34;</span>,
        task<span style="color:#f92672">=</span>template_file,
        template<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;vrf.j2&#34;</span>,
        path<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;templates/&#34;</span>,
        data<span style="color:#f92672">=</span>task<span style="color:#f92672">.</span>host[<span style="color:#e6db74">&#34;vrfs&#34;</span>],
    )
    vrf_config <span style="color:#f92672">=</span> task1_result[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>result

    task2_result <span style="color:#f92672">=</span> task<span style="color:#f92672">.</span>run(
        name<span style="color:#f92672">=</span>f<span style="color:#e6db74">&#34;{task.host.name}: Configuring VRFs on PE Nodes&#34;</span>,
        task<span style="color:#f92672">=</span>send_configs,
        configs<span style="color:#f92672">=</span>vrf_config<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>),
    )
</code></pre></div><p>I name the tasks for clarity when seeing the job output. Initially we run a <em>template_file</em> task that will create commands from a template. Then its a matter of pointing it to our specific template and feeding it data. Once that is done I set the output of that task to a variable called <em>vrf_config</em>, this can then be fed into the next task to push the commands to our PE routers.</p>
<pre><code class="language-jinja2" data-lang="jinja2">{% for vrf in data %}
vrf definition {{ vrf.name }}
 rd {{ vrf.rd }}
 route-target export {{ vrf.rt_export }}
 route-target import {{ vrf.rt_import }}
 !
 address-family ipv4
 exit-address-family
{% endfor %}
</code></pre><p>Example of the VRF Jinja template above. The rest of the items for L3VPNs use the same structure. Feel free to check out the git repository linked below to see the rest. Ill show the output from a few PE and CE routers before and after the changes.</p>
<pre><code>PE1#show vrf brief
  Name                             Default RD            Protocols   Interfaces
  MGMT                             &lt;not set&gt;             ipv4        Et0/3
PE1#
PE2#show vrf brief
  Name                             Default RD            Protocols   Interfaces
  MGMT                             &lt;not set&gt;             ipv4
PE2#
PE3#show vrf brief
  Name                             Default RD            Protocols   Interfaces
  MGMT                             &lt;not set&gt;             ipv4
PE3#
PE4#show vrf brief
  Name                             Default RD            Protocols   Interfaces
  MGMT                             &lt;not set&gt;             ipv4        Et0/3
PE4#
##### CE Devices #####
CE1#show ip bgp  summary | b Neigh
Neighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
10.0.11.1       4        12345       0       0        1    0    0 00:10:51 Active
CE1#show ip bgp | b Network
     Network          Next Hop            Metric LocPrf Weight Path
 *&gt;  172.16.1.0/24    0.0.0.0                  0         32768 i
CE1#
CE2#show ip bgp summary | b Neigh
Neighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
10.0.22.1       4        12345       0       0        1    0    0 00:13:22 Idle
CE2#show ip bgp | b Network
     Network          Next Hop            Metric LocPrf Weight Path
 *&gt;  172.16.2.0/24    0.0.0.0                  0         32768 i
CE2#
CE3#show ip bgp summary | b Neigh
Neighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
10.0.33.1       4        12345       0       0        1    0    0 never    Active
CE3#show ip bgp | b Network
     Network          Next Hop            Metric LocPrf Weight Path
 *&gt;  172.16.1.0/24    0.0.0.0                  0         32768 i
CE3#
CE4#show ip bgp summary | b Neigh
Neighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
10.0.44.1       4        12345       0       0        1    0    0 never    Active
CE4#show ip bgp | b Network
     Network          Next Hop            Metric LocPrf Weight Path
 *&gt;  172.16.2.0/24    0.0.0.0                  0         32768 i
CE4#
</code></pre><h2 id="script-output">Script Output</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">(venv) [juliopdx<span style="color:#a6e22e">@pbpro</span> auto_mpls_l3vpn]<span style="color:#960050;background-color:#1e0010">$</span> time python l3vpn_deploy<span style="color:#f92672">.</span>py
Nornir initialized <span style="color:#66d9ef">with</span> the following hosts:

PE1

PE2

PE3

PE4

l3vpn<span style="color:#f92672">***************************************************************************</span>
<span style="color:#f92672">*</span> PE1 <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">********************************************************</span>
vvvv l3vpn <span style="color:#f92672">**</span> changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO
<span style="color:#f92672">----</span> PE1: Creating VRFs Configuration <span style="color:#f92672">**</span> changed : False <span style="color:#f92672">-----------------------</span> INFO
vrf definition CUSTOMER_789
 rd <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family
vrf definition CUSTOMER_777
 rd <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family

<span style="color:#f92672">----</span> PE1: Configuring VRFs on PE Nodes <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">-----------------------</span> INFO
vrf definition CUSTOMER_789
 rd <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family
vrf definition CUSTOMER_777
 rd <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family


<span style="color:#f92672">----</span> PE1: Create VRF to Interfaces Configuration <span style="color:#f92672">**</span> changed : False <span style="color:#f92672">------------</span> INFO
interface Ethernet0<span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>
 vrf forwarding CUSTOMER_789
 ip address <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">11.1</span> <span style="color:#ae81ff">255.255</span><span style="color:#f92672">.</span><span style="color:#ae81ff">255.0</span>
<span style="color:#960050;background-color:#1e0010">!</span>

<span style="color:#f92672">----</span> PE1: Configuring VRFs on Interfaces <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">---------------------</span> INFO
interface Ethernet0<span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>
 vrf forwarding CUSTOMER_789
 ip address <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">11.1</span> <span style="color:#ae81ff">255.255</span><span style="color:#f92672">.</span><span style="color:#ae81ff">255.0</span>
<span style="color:#960050;background-color:#1e0010">!</span>


<span style="color:#f92672">----</span> PE1: Create BGP Neighbor Configuration <span style="color:#f92672">**</span> changed : False <span style="color:#f92672">-----------------</span> INFO
router bgp <span style="color:#ae81ff">12345</span>
  address<span style="color:#f92672">-</span>family ipv4 vrf CUSTOMER_789
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">11.2</span> remote<span style="color:#f92672">-</span><span style="color:#66d9ef">as</span> <span style="color:#ae81ff">789</span>
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">11.2</span> activate
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family

<span style="color:#f92672">----</span> PE1: Configuring BGP Neighbors under VRFs <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">---------------</span> INFO
router bgp <span style="color:#ae81ff">12345</span>
  address<span style="color:#f92672">-</span>family ipv4 vrf CUSTOMER_789
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">11.2</span> remote<span style="color:#f92672">-</span><span style="color:#66d9ef">as</span> <span style="color:#ae81ff">789</span>
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">11.2</span> activate
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family


<span style="color:#f92672">^^^^</span> END l3vpn <span style="color:#f92672">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>
<span style="color:#f92672">*</span> PE2 <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">********************************************************</span>
vvvv l3vpn <span style="color:#f92672">**</span> changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO
<span style="color:#f92672">----</span> PE2: Creating VRFs Configuration <span style="color:#f92672">**</span> changed : False <span style="color:#f92672">-----------------------</span> INFO
vrf definition CUSTOMER_789
 rd <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family
vrf definition CUSTOMER_777
 rd <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family

<span style="color:#f92672">----</span> PE2: Configuring VRFs on PE Nodes <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">-----------------------</span> INFO
vrf definition CUSTOMER_789
 rd <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family
vrf definition CUSTOMER_777
 rd <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family


<span style="color:#f92672">----</span> PE2: Create VRF to Interfaces Configuration <span style="color:#f92672">**</span> changed : False <span style="color:#f92672">------------</span> INFO
interface Ethernet0<span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>
 vrf forwarding CUSTOMER_777
 ip address <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">22.1</span> <span style="color:#ae81ff">255.255</span><span style="color:#f92672">.</span><span style="color:#ae81ff">255.0</span>
<span style="color:#960050;background-color:#1e0010">!</span>

<span style="color:#f92672">----</span> PE2: Configuring VRFs on Interfaces <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">---------------------</span> INFO
interface Ethernet0<span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>
 vrf forwarding CUSTOMER_777
 ip address <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">22.1</span> <span style="color:#ae81ff">255.255</span><span style="color:#f92672">.</span><span style="color:#ae81ff">255.0</span>
<span style="color:#960050;background-color:#1e0010">!</span>


<span style="color:#f92672">----</span> PE2: Create BGP Neighbor Configuration <span style="color:#f92672">**</span> changed : False <span style="color:#f92672">-----------------</span> INFO
router bgp <span style="color:#ae81ff">12345</span>
  address<span style="color:#f92672">-</span>family ipv4 vrf CUSTOMER_777
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">22.2</span> remote<span style="color:#f92672">-</span><span style="color:#66d9ef">as</span> <span style="color:#ae81ff">777</span>
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">22.2</span> activate
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family

<span style="color:#f92672">----</span> PE2: Configuring BGP Neighbors under VRFs <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">---------------</span> INFO
router bgp <span style="color:#ae81ff">12345</span>
  address<span style="color:#f92672">-</span>family ipv4 vrf CUSTOMER_777
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">22.2</span> remote<span style="color:#f92672">-</span><span style="color:#66d9ef">as</span> <span style="color:#ae81ff">777</span>
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">22.2</span> activate
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family


<span style="color:#f92672">^^^^</span> END l3vpn <span style="color:#f92672">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>
<span style="color:#f92672">*</span> PE3 <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">********************************************************</span>
vvvv l3vpn <span style="color:#f92672">**</span> changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO
<span style="color:#f92672">----</span> PE3: Creating VRFs Configuration <span style="color:#f92672">**</span> changed : False <span style="color:#f92672">-----------------------</span> INFO
vrf definition CUSTOMER_789
 rd <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family
vrf definition CUSTOMER_777
 rd <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family

<span style="color:#f92672">----</span> PE3: Configuring VRFs on PE Nodes <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">-----------------------</span> INFO
vrf definition CUSTOMER_789
 rd <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family
vrf definition CUSTOMER_777
 rd <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family


<span style="color:#f92672">----</span> PE3: Create VRF to Interfaces Configuration <span style="color:#f92672">**</span> changed : False <span style="color:#f92672">------------</span> INFO
interface Ethernet0<span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>
 vrf forwarding CUSTOMER_777
 ip address <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">33.1</span> <span style="color:#ae81ff">255.255</span><span style="color:#f92672">.</span><span style="color:#ae81ff">255.0</span>
<span style="color:#960050;background-color:#1e0010">!</span>

<span style="color:#f92672">----</span> PE3: Configuring VRFs on Interfaces <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">---------------------</span> INFO
interface Ethernet0<span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>
 vrf forwarding CUSTOMER_777
 ip address <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">33.1</span> <span style="color:#ae81ff">255.255</span><span style="color:#f92672">.</span><span style="color:#ae81ff">255.0</span>
<span style="color:#960050;background-color:#1e0010">!</span>


<span style="color:#f92672">----</span> PE3: Create BGP Neighbor Configuration <span style="color:#f92672">**</span> changed : False <span style="color:#f92672">-----------------</span> INFO
router bgp <span style="color:#ae81ff">12345</span>
  address<span style="color:#f92672">-</span>family ipv4 vrf CUSTOMER_777
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">33.2</span> remote<span style="color:#f92672">-</span><span style="color:#66d9ef">as</span> <span style="color:#ae81ff">777</span>
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">33.2</span> activate
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family

<span style="color:#f92672">----</span> PE3: Configuring BGP Neighbors under VRFs <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">---------------</span> INFO
router bgp <span style="color:#ae81ff">12345</span>
  address<span style="color:#f92672">-</span>family ipv4 vrf CUSTOMER_777
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">33.2</span> remote<span style="color:#f92672">-</span><span style="color:#66d9ef">as</span> <span style="color:#ae81ff">777</span>
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">33.2</span> activate
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family


<span style="color:#f92672">^^^^</span> END l3vpn <span style="color:#f92672">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>
<span style="color:#f92672">*</span> PE4 <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">********************************************************</span>
vvvv l3vpn <span style="color:#f92672">**</span> changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO
<span style="color:#f92672">----</span> PE4: Creating VRFs Configuration <span style="color:#f92672">**</span> changed : False <span style="color:#f92672">-----------------------</span> INFO
vrf definition CUSTOMER_789
 rd <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family
vrf definition CUSTOMER_777
 rd <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family

<span style="color:#f92672">----</span> PE4: Configuring VRFs on PE Nodes <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">-----------------------</span> INFO
vrf definition CUSTOMER_789
 rd <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">789</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family
vrf definition CUSTOMER_777
 rd <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target export <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 route<span style="color:#f92672">-</span>target <span style="color:#f92672">import</span> <span style="color:#ae81ff">777</span>:<span style="color:#ae81ff">1</span>
 <span style="color:#960050;background-color:#1e0010">!</span>
 address<span style="color:#f92672">-</span>family ipv4
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family


<span style="color:#f92672">----</span> PE4: Create VRF to Interfaces Configuration <span style="color:#f92672">**</span> changed : False <span style="color:#f92672">------------</span> INFO
interface Ethernet0<span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>
 vrf forwarding CUSTOMER_789
 ip address <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">44.1</span> <span style="color:#ae81ff">255.255</span><span style="color:#f92672">.</span><span style="color:#ae81ff">255.0</span>
<span style="color:#960050;background-color:#1e0010">!</span>

<span style="color:#f92672">----</span> PE4: Configuring VRFs on Interfaces <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">---------------------</span> INFO
interface Ethernet0<span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>
 vrf forwarding CUSTOMER_789
 ip address <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">44.1</span> <span style="color:#ae81ff">255.255</span><span style="color:#f92672">.</span><span style="color:#ae81ff">255.0</span>
<span style="color:#960050;background-color:#1e0010">!</span>


<span style="color:#f92672">----</span> PE4: Create BGP Neighbor Configuration <span style="color:#f92672">**</span> changed : False <span style="color:#f92672">-----------------</span> INFO
router bgp <span style="color:#ae81ff">12345</span>
  address<span style="color:#f92672">-</span>family ipv4 vrf CUSTOMER_789
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">44.2</span> remote<span style="color:#f92672">-</span><span style="color:#66d9ef">as</span> <span style="color:#ae81ff">789</span>
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">44.2</span> activate
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family

<span style="color:#f92672">----</span> PE4: Configuring BGP Neighbors under VRFs <span style="color:#f92672">**</span> changed : True <span style="color:#f92672">---------------</span> INFO
router bgp <span style="color:#ae81ff">12345</span>
  address<span style="color:#f92672">-</span>family ipv4 vrf CUSTOMER_789
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">44.2</span> remote<span style="color:#f92672">-</span><span style="color:#66d9ef">as</span> <span style="color:#ae81ff">789</span>
  neighbor <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">44.2</span> activate
 exit<span style="color:#f92672">-</span>address<span style="color:#f92672">-</span>family


<span style="color:#f92672">^^^^</span> END l3vpn <span style="color:#f92672">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>

real    <span style="color:#ae81ff">0</span>m9<span style="color:#f92672">.</span><span style="color:#ae81ff">216</span>s
user    <span style="color:#ae81ff">0</span>m6<span style="color:#f92672">.</span><span style="color:#ae81ff">683</span>s
sys     <span style="color:#ae81ff">0</span>m1<span style="color:#f92672">.</span><span style="color:#ae81ff">07</span><span style="color:#ae81ff">9</span>s
(venv) [juliopdx<span style="color:#a6e22e">@pbpro</span> auto_mpls_l3vpn]<span style="color:#960050;background-color:#1e0010">$</span>
</code></pre></div><h2 id="vrf-creation-validation">VRF Creation Validation</h2>
<pre><code>PE1#show ip vrf
  Name                             Default RD            Interfaces
  CUSTOMER_777                     777:1
  CUSTOMER_789                     789:1                 Et0/0
  MGMT                             &lt;not set&gt;             Et0/3
PE1#
PE2#show ip vrf
  Name                             Default RD            Interfaces
  CUSTOMER_777                     777:1                 Et0/0
  CUSTOMER_789                     789:1
  MGMT                             &lt;not set&gt;
PE2#
PE3#show ip vrf
  Name                             Default RD            Interfaces
  CUSTOMER_777                     777:1                 Et0/0
  CUSTOMER_789                     789:1
  MGMT                             &lt;not set&gt;
PE3#
PE4#show ip vrf
  Name                             Default RD            Interfaces
  CUSTOMER_777                     777:1
  CUSTOMER_789                     789:1                 Et0/0
  MGMT                             &lt;not set&gt;             Et0/3
PE4#
</code></pre><h2 id="bgp-peers-and-routes-on-ce-routers">BGP Peers and Routes on CE Routers</h2>
<pre><code>CE1#show ip bgp  summary | b Neigh
Neighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
10.0.11.1       4        12345      19      20        3    0    0 00:13:17        1
CE1#show ip bgp | b Network
     Network          Next Hop            Metric LocPrf Weight Path
 *&gt;  172.16.1.0/24    0.0.0.0                  0         32768 i
 *&gt;  172.16.2.0/24    10.0.11.1                              0 12345 789 i
CE1#traceroute 172.16.2.1 source 172.16.1.1 probe 1 numeric
Type escape sequence to abort.
Tracing the route to 172.16.2.1
VRF info: (vrf in name/id, vrf out name/id)
  1 10.0.11.1 0 msec
  2 10.0.15.5 [MPLS: Labels 300/24 Exp 0] 2 msec
  3 10.0.44.1 [MPLS: Label 24 Exp 0] 2 msec
  4 10.0.44.2 1 msec
CE1#
CE3#show ip bgp summary | b Neigh
Neighbor        V           AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd
10.0.33.1       4        12345      25      23        3    0    0 00:17:34        1
CE3#show ip bgp | b Network
     Network          Next Hop            Metric LocPrf Weight Path
 *&gt;  172.16.1.0/24    0.0.0.0                  0         32768 i
 *&gt;  172.16.2.0/24    10.0.33.1                              0 12345 777 i
CE3#traceroute 172.16.2.1 source 172.16.1.1 probe 1 numeric
Type escape sequence to abort.
Tracing the route to 172.16.2.1
VRF info: (vrf in name/id, vrf out name/id)
  1 10.0.33.1 1 msec
  2 10.0.35.5 [MPLS: Labels 302/407 Exp 0] 2 msec
  3 10.0.22.1 [MPLS: Label 407 Exp 0] 2 msec
  4 10.0.22.2 2 msec
CE3#
</code></pre><h2 id="outro-and-links">Outro and Links</h2>
<p>I think there’s always room for improvement. Even off the top of my head a few additions could be the following:</p>
<ul>
<li>Automated testing</li>
<li>Validation with something like pyATS to validate VRF creation on PE routers</li>
</ul>
<p>I hope you found this a bit useful and maybe inspires you to build something you can use in everyday workload. Feel free to check out the links below to a few resources I found very helpful. Thank you again for reading this far, really means a lot.</p>
<ul>
<li><a href="https://github.com/JulioPDX/auto_mpls_l3vpn">GitHub Repository</a></li>
<li><a href="https://nornir.readthedocs.io/en/latest/">Nornir Documentation</a></li>
<li><a href="https://nornir.tech/nornir/plugins/">Nornir Plugins</a></li>
<li><a href="https://www.pluralsight.com/courses/automating-networks-python">Automating Networks with Python by Nick Russo</a></li>
<li><a href="https://saidvandeklundert.net/2020-12-06-nornir/">Nornir Blog Post by Said van de Klundert</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Python Slack Bot for Network Engineers</title>
            <link>https://juliopdx.github.io/2021/05/24/python-slack-bot-for-network-engineers/</link>
            <pubDate>Mon, 24 May 2021 10:19:32 -0800</pubDate>
            
            <guid>https://juliopdx.github.io/2021/05/24/python-slack-bot-for-network-engineers/</guid>
            <description>Introduction Hello and thank you for joining me in another blog post. I’ve wanted to mess with getting a bot running on Slack for a while now. After coming across a fantastic post by Mason Egger at Digital Ocean (linked at the end), I figured now is as good a time as any. Think of that post as a prerequisite to get you started before following along with this one.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello and thank you for joining me in another blog post. I’ve wanted to mess with getting a bot running on Slack for a while now. After coming across a fantastic post by Mason Egger at Digital Ocean (linked at the end), I figured now is as good a time as any. Think of that post as a prerequisite to get you started before following along with this one.</p>
<h2 id="caveats">Caveats</h2>
<p>A few caveats I should include. I’m a fairly novice python user, expect to see areas where code can be refactored and even total rewrites that would make the organization better. What I will demonstrate in this post is what made sense to me at this point in time. I hope you enjoy and maybe get inspired to build something you can use to assist you in your daily workflow.</p>
<h2 id="network-engineering-bot">Network Engineering Bot</h2>
<p>Below are a few of the goals I had when creating this bot.</p>
<ul>
<li>Must be multi-vendor</li>
<li>Ability to call different (non static) devices</li>
<li>Bot should react to user messages</li>
</ul>
<p>Lets walk through some code and I hope to answer how those goals were met. I’ll try not to repeat information that was already shared in Masons post. The initial code from Masons example has you create a class called CoinBot. It only made sense to me to create a separate class to define our network engineering bot. In this case we will call it NetBot, but you can name your bot whatever you like.</p>
<p><code>get_network.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> json
<span style="color:#f92672">from</span> napalm <span style="color:#f92672">import</span> get_network_driver
<span style="color:#f92672">from</span> yaml <span style="color:#f92672">import</span> safe_load
<span style="color:#f92672">import</span> urllib3

<span style="color:#75715e"># Disable warnings</span>
urllib3<span style="color:#f92672">.</span>disable_warnings(urllib3<span style="color:#f92672">.</span>exceptions<span style="color:#f92672">.</span>InsecureRequestWarning)

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">NetBot</span>:
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Defining a class called NetBot
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>

    USERNAME <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;admin&#34;</span>
    PASSWORD <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;admin&#34;</span>
    NET_BLOCK <span style="color:#f92672">=</span> {
        <span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;section&#34;</span>,
        <span style="color:#e6db74">&#34;text&#34;</span>: {
            <span style="color:#e6db74">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;mrkdwn&#34;</span>,
            <span style="color:#e6db74">&#34;text&#34;</span>: (
                <span style="color:#e6db74">&#34;Getting interface information for device 🙂&#34;</span>
            ),
        },
    }

    <span style="color:#66d9ef">def</span> __init__(self, channel, device_name):
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        constructor for class
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        self<span style="color:#f92672">.</span>channel <span style="color:#f92672">=</span> channel
        self<span style="color:#f92672">.</span>device_name <span style="color:#f92672">=</span> device_name
</code></pre></div><p>A few things to note. The variables you see in all caps are called class attributes/constants. Essentially things in the program that wont change. I kept it simple and created some credentials for authentication as class attributes. In reality this would be an environment variable or pulled from a secure source. The NET_BLOCK class attribute is just there so the bot can respond with some generic message to the user.</p>
<p>One of the first things that came to mind when building the bot is how will users know how to run the bot? I created the following method to solve that little problem. We are basically reading the readme file in our root directory and then returning all the data required to compose a message in slack. The following is added under our NetBot class from above.</p>
<p><code>get_network.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">send_help</span>(self):
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        Sending all the help
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;README.md&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> reader:
            readme <span style="color:#f92672">=</span> reader<span style="color:#f92672">.</span>read()
        <span style="color:#66d9ef">return</span> {
            <span style="color:#e6db74">&#34;channels&#34;</span>: self<span style="color:#f92672">.</span>channel,
            <span style="color:#e6db74">&#34;filename&#34;</span>: <span style="color:#e6db74">&#34;README.md&#34;</span>,
            <span style="color:#e6db74">&#34;filetype&#34;</span>: <span style="color:#e6db74">&#34;markdown&#34;</span>,
            <span style="color:#e6db74">&#34;content&#34;</span>: readme,
        }
</code></pre></div><p><img src="/blog/images/netbot_help.png" alt="netbot help"></p>
<h2 id="interacting-with-network-devices">Interacting With Network Devices</h2>
<p>I mentioned before I wanted this to be multi-vendor. In this case we are going to use the popular NAPALM library!</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">pip install napalm
pip install pyaoscx
pip install napalm-aruba-cx
</code></pre></div><p>In theory you can use whatever you are comfortable with; Netmiko, NAPALM, Nornir, or Ansible. As long as the end result returns data in a format we can use to craft a Slack message. For our networking example, we will use NAPALM to retrieve the network interfaces from two devices. One being a Cisco IOL router and the other an Aruba CX switch. Below you will see the two methods used to put this all together. The first is pretty standard syntax to connect to device, run the get_interfaces function, and return as pretty JSON.</p>
<p>Quick deviation, I almost forgot to mention the inventory. In a grander scale, you would most likely have some dynamic inventory that is cached to the app running or the code actually interacts with your inventory source to pull the correct information. Think Netbox API call to get device information for a device named XYZ. This would then have management IP, platform, and whatever else would be needed to connect using NAPALM. In our case we are using a very simple YAML file with the two hosts mentioned earlier.</p>
<p><code>hosts.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">
---
<span style="color:#f92672">R1</span>:
  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">R1</span>
  <span style="color:#f92672">platform</span>: <span style="color:#ae81ff">ios</span>
  <span style="color:#f92672">mgmt</span>: <span style="color:#e6db74">&#34;192.168.10.168&#34;</span>
<span style="color:#f92672">ArubaCX</span>:
  <span style="color:#f92672">name</span>: <span style="color:#ae81ff">ArubaCX</span>
  <span style="color:#f92672">platform</span>: <span style="color:#ae81ff">aoscx</span>
  <span style="color:#f92672">mgmt</span>: <span style="color:#e6db74">&#34;192.168.10.169&#34;</span>
</code></pre></div><p>As promised, here is the code that interacts with our network devices.</p>
<p><code>get_network.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">_get_facts</span>(self):
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        Method that will retrieve host facts
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;hosts.yaml&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> handle:
            host_root <span style="color:#f92672">=</span> safe_load(handle)

        driver <span style="color:#f92672">=</span> get_network_driver(host_root[f<span style="color:#e6db74">&#34;{self.device_name}&#34;</span>][<span style="color:#e6db74">&#34;platform&#34;</span>])
        conn <span style="color:#f92672">=</span> driver(
            hostname<span style="color:#f92672">=</span>host_root[f<span style="color:#e6db74">&#34;{self.device_name}&#34;</span>][<span style="color:#e6db74">&#34;mgmt&#34;</span>],
            username<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>USERNAME,
            password<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>PASSWORD,
        )
        conn<span style="color:#f92672">.</span>open()
        facts <span style="color:#f92672">=</span> conn<span style="color:#f92672">.</span>get_interfaces()
        my_file <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>dumps(facts, indent<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
        <span style="color:#66d9ef">return</span> my_file
</code></pre></div><p>The second portion of interacting with the networking device is constructing the message. The following method will return a working format to post a file type message in Slack. Notice towards the bottom the “content” key is actually calling the “_get_facts” method above? The _get_facts method is just returning some pretty formatted JSON string that we can then pass into our method to build a slack message.</p>
<p><code>get_network.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_file_payload</span>(self):
        <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">        Method used to post files from data gathered on device
</span><span style="color:#e6db74">        &#34;&#34;&#34;</span>
        <span style="color:#66d9ef">return</span> {
            <span style="color:#e6db74">&#34;channels&#34;</span>: self<span style="color:#f92672">.</span>channel,
            <span style="color:#e6db74">&#34;filetype&#34;</span>: <span style="color:#e6db74">&#34;javascript&#34;</span>,
            <span style="color:#e6db74">&#34;content&#34;</span>: self<span style="color:#f92672">.</span>_get_facts(),
            <span style="color:#e6db74">&#34;filename&#34;</span>: f<span style="color:#e6db74">&#34;{self.device_name}-interfaces.json&#34;</span>,
        }
</code></pre></div><h2 id="running-the-application">Running the Application</h2>
<p>As mentioned previously, this code is heavily borrowed from Masons post! So much so that I left in the CoinBot learnings because it is an amazing reference and the code comments are great for learners. Ill cut out some of the extra information to just focus on the action, full code is available on my GitHub (linked below).</p>
<p><code>app.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> os
<span style="color:#f92672">import</span> logging
<span style="color:#f92672">from</span> flask <span style="color:#f92672">import</span> Flask
<span style="color:#f92672">from</span> slack <span style="color:#f92672">import</span> WebClient
<span style="color:#f92672">from</span> slackeventsapi <span style="color:#f92672">import</span> SlackEventAdapter
<span style="color:#f92672">from</span> coinbot <span style="color:#f92672">import</span> CoinBot
<span style="color:#f92672">from</span> get_network <span style="color:#f92672">import</span> NetBot

<span style="color:#75715e"># Initialize a Flask app to host the events adapter</span>
app <span style="color:#f92672">=</span> Flask(__name__)

<span style="color:#75715e"># Create an events adapter and register it to an endpoint in the slack app for event ingestion.</span>
slack_events_adapter <span style="color:#f92672">=</span> SlackEventAdapter(
    os<span style="color:#f92672">.</span>environ<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;SLACK_EVENTS_TOKEN&#34;</span>), <span style="color:#e6db74">&#34;/slack/events&#34;</span>, app
)

<span style="color:#75715e"># Initialize a Web API client</span>
slack_web_client <span style="color:#f92672">=</span> WebClient(token<span style="color:#f92672">=</span>os<span style="color:#f92672">.</span>environ<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;SLACK_TOKEN&#34;</span>))

<span style="color:#75715e"># Define bot ID so it will not respond to itself</span>
BOT_ID <span style="color:#f92672">=</span> slack_web_client<span style="color:#f92672">.</span>api_call(<span style="color:#e6db74">&#34;auth.test&#34;</span>)[<span style="color:#e6db74">&#34;user_id&#34;</span>]
</code></pre></div><p>Lets break that code down a bit. We will be utilizing Flask to do most of the heavy lifting. The imports mentioned above will import the required Flask, Slack, and NetBot packages. We utilize two environment variables for authentication. The BOT_ID constant is used in code later on to make sure the bot does not respond to itself. The next portions actually perform the execution of all of our code. I will break down one portion to keeps things short and sweet, but most all of them follow the same workflow.</p>
<p><code>app.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">get_network_info</span>(channel, device_name):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    run the get_message_payload and get_file_upload method
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    net_bot <span style="color:#f92672">=</span> NetBot(channel, device_name)
    my_message <span style="color:#f92672">=</span> net_bot<span style="color:#f92672">.</span>get_message_payload()
    file_output <span style="color:#f92672">=</span> net_bot<span style="color:#f92672">.</span>get_file_payload()
    slack_web_client<span style="color:#f92672">.</span>chat_postMessage(<span style="color:#f92672">**</span>my_message)
    slack_web_client<span style="color:#f92672">.</span>files_upload(<span style="color:#f92672">**</span>file_output)
</code></pre></div><p>We are creating a function called get_network_info that takes in two parameters. When this function is executed, it will instantiate an instance of NetBot, send a generic message, and upload the file created from the get_file_payload method.</p>
<p>The next portion of the code is used to handle how the bot interacts with messages seen or what is executed when a certain message is seen. From part one of Masons post, we subscribed the bot to events (and we filter on messages). Once we get a message we strip out certain portions that can then be reused to respond in the proper channel, react to a specific message (timestamp), and make sure the bot does not respond to itself.</p>
<p><code>app.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># When a &#39;message&#39; event is detected by the events adapter, forward that payload</span>
<span style="color:#75715e"># to this function.</span>
<span style="color:#a6e22e">@slack_events_adapter.on</span>(<span style="color:#e6db74">&#34;message&#34;</span>)
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">message</span>(payload):
    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    Parse the message event, and if the activation string is in the text,
</span><span style="color:#e6db74">    simulate something and send result
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>

    <span style="color:#75715e"># Get various portions of message</span>
    event <span style="color:#f92672">=</span> payload<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;event&#34;</span>, {})
    text <span style="color:#f92672">=</span> event<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;text&#34;</span>)
    user_id <span style="color:#f92672">=</span> event<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;user&#34;</span>)
    timestamp <span style="color:#f92672">=</span> event<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;ts&#34;</span>)
    channel_id <span style="color:#f92672">=</span> event<span style="color:#f92672">.</span>get(<span style="color:#e6db74">&#34;channel&#34;</span>)

    <span style="color:#75715e"># Making sure the bot doesnt respond to itself</span>
    <span style="color:#66d9ef">if</span> BOT_ID <span style="color:#f92672">!=</span> user_id:
</code></pre></div><p>The next piece of code is used to parse the messages that are seen by the bot. If a string matches one of the if clauses, some code will be executed. In this case we are looking for “netbot get network interfaces”. If you noticed in the readme, we are asking users to enter “netbot get network interfaces device=something”. The code will parse this output and strip “device=” to get the final device name. This will then be passed into the get_network_info function and execute the program.</p>
<p><code>app.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">        <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;netbot get network interfaces&#34;</span> <span style="color:#f92672">in</span> text<span style="color:#f92672">.</span>lower():
            full_text <span style="color:#f92672">=</span> text<span style="color:#f92672">.</span>split()
            device <span style="color:#f92672">=</span> full_text[<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>]
            my_device <span style="color:#f92672">=</span> device<span style="color:#f92672">.</span>replace(<span style="color:#e6db74">&#34;device=&#34;</span>, <span style="color:#e6db74">&#34;&#34;</span>)
            slack_web_client<span style="color:#f92672">.</span>reactions_add(
                channel<span style="color:#f92672">=</span>channel_id, name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;robot_face&#34;</span>, timestamp<span style="color:#f92672">=</span>timestamp
            )
            slack_web_client<span style="color:#f92672">.</span>reactions_add(
                channel<span style="color:#f92672">=</span>channel_id, name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rocket&#34;</span>, timestamp<span style="color:#f92672">=</span>timestamp
            )
            <span style="color:#66d9ef">return</span> get_network_info(channel_id, device_name<span style="color:#f92672">=</span>my_device)
</code></pre></div><p>You may have noticed a few commands the are prepend with “slack_web_client.reactions_add”. I wanted a way for the bot to respond to a user inputting a message that triggers the bot. Almost like a confirmation of message received. This can be message specific as I have made it for “netbot help” or “netbot get network interfaces”. Remember just a bit ago how we strip certain information from the message received like channel and timestamp ID? This is used throughout the code but here we are statically setting the types of reactions executed for this match. In the case of “get_network_info” the bot will react with a robot face and rocket.</p>
<p><img src="/blog/images/get_interfaces.png" alt="Get Interfaces"></p>
<p>The rest of the code is boilerplate to execute the application and enable logging. No changes from the original post at Digital Ocean. I want to thank Mason for the amazing blog post to kick start this spark for me. Thank you for reading this far, really means a lot! I hope what I’ve written makes a bit of sense and maybe inspires you to create something awesome.</p>
<h2 id="bugsissues">Bugs/Issues</h2>
<ul>
<li>Bot reruns get network interface code even when new message is not sent (not seen when reactions are used).</li>
<li>When reaction is used multiple runs are not seen but app reports error 500 (already reacted).</li>
</ul>
<h2 id="links">Links</h2>
<ul>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-build-a-slackbot-in-python-on-ubuntu-20-04">How To Build a Slackbot in Python on Ubuntu 20.04</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLzMcBGfZo4-kqyzTzJWCV6lyK-ZMYECDc">Python Slack Bot Tutorial Playlist by Tech With Tim</a></li>
<li><a href="https://github.com/JulioPDX/ne_bot_example">GitHub Repository</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Route Redistribution OSPFv3 and EIGRPv6</title>
            <link>https://juliopdx.github.io/2021/05/03/route-redistribution-ospfv3-and-eigrpv6/</link>
            <pubDate>Mon, 03 May 2021 00:00:00 +0000</pubDate>
            
            <guid>https://juliopdx.github.io/2021/05/03/route-redistribution-ospfv3-and-eigrpv6/</guid>
            <description>Introduction Hello and thank you for checking out this post. I was recently working through OSPF and EIGRP for ENARSI studies and something came up on a lab I was building. Redistributing routes between OSPFv3 and EIGRPv6. I am specifically speaking of the IPv6 variant of these protocols.
In the topology you see below. We have three routing devices. One running only EIGRPv6, one running OSPFv3 (Aruba CX), and the redistribution node running both protocols.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello and thank you for checking out this post. I was recently working through OSPF and EIGRP for ENARSI studies and something came up on a lab I was building. Redistributing routes between OSPFv3 and EIGRPv6. I am specifically speaking of the IPv6 variant of these protocols.</p>
<p>In the topology you see below. We have three routing devices. One running only EIGRPv6, one running OSPFv3 (Aruba CX), and the redistribution node running both protocols. Both protocols can form neighbors using only link local addressing, so we wont see any global IPv6 addresses on those links.</p>
<p><img src="/blog/images/ospftoeigrp.png" alt="OSPF to EIGRP"></p>
<h2 id="ospfv3">OSPFv3</h2>
<p>The OSPFv3 node is an Aruba CX switch running …OSPFv3! I have a few loopbacks configured so we can add some networks for testing. All of OSPF will be in area 0 for simplicity. We set all interfaces to passive besides the uplink to REDIS. Configuration snippet is below.</p>
<p><code>OSPFv3 Node Configuration</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">hostname OSPFv3
!
interface 1/1/1
    no shutdown
    description to REDIS
    ipv6 address link-local fe80::3/64
    ipv6 ospfv3 1 area 0.0.0.0
    no ipv6 ospfv3 passive
    ipv6 ospfv3 network point-to-point
interface loopback 0
    ipv6 address link-local fe80::3/64
    ipv6 address 2001:db8:456:4::1/64
    ipv6 ospfv3 1 area 0.0.0.0
interface loopback 1
    ipv6 address link-local fe80::3/64
    ipv6 address 2001:db8:456:5::1/64
    ipv6 ospfv3 1 area 0.0.0.0
interface loopback 2
    ipv6 address link-local fe80::3/64
    ipv6 address 2001:db8:456:6::1/64
    ipv6 ospfv3 1 area 0.0.0.0
!
router ospfv3 1
    router-id 3.3.3.3
    passive-interface default
    area 0.0.0.0
!
</code></pre></div><h2 id="eigrpv6">EIGRPv6</h2>
<p>In the case of EIGRPv6, we will be using named EIGRP with an address family of IPv6. We add a few loopbacks for testing as well. One difference you’ll see in the configurations, EIGRPv6 is enabled on all interfaces with IPv6 addresses. There is no specific enablement of an interface to run EIGRPv6 or network statements. Configuration snippet is below.</p>
<p><code>EIGRPv6 Node Configuration</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">hostname EIGRPv6
!
ipv6 unicast-routing
!
interface Loopback0
 no ip address
 ipv6 address FE80::1 link-local
 ipv6 address 2001:DB8:123:1::1/64
!
interface Loopback1
 no ip address
 ipv6 address FE80::1 link-local
 ipv6 address 2001:DB8:123:2::1/64
!
interface Loopback2
 no ip address
 ipv6 address FE80::1 link-local
 ipv6 address 2001:DB8:123:3::1/64
!
interface GigabitEthernet0/0
 description to REDIS
 no ip address
 ipv6 address FE80::1 link-local
!
router eigrp JULIOPDX
 !
 address-family ipv6 unicast autonomous-system 123
  !
  topology base
  exit-af-topology
  eigrp router-id 1.1.1.1
 exit-address-family
</code></pre></div><h2 id="redis">REDIS</h2>
<p>This node is special, it gets to run two routing protocols and perform redistribution between them! The configuration is very basic indeed. Only two interfaces set for link local addresses. Oh remember when I mentioned EIGRPv6 is enabled for all IPv6 interfaces? I will shutdown the interface towards OSPFv3. Good to reduce all the chatter. Configuration snippet is below.</p>
<p><code>REDIS Node Initial Configuration</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">hostname REDIS
!
ipv6 unicast-routing
!
interface GigabitEthernet0/0
 description to EIGRPv6
 no ip address
 ipv6 address FE80::2 link-local
!
interface GigabitEthernet0/1
 description to OSPFv3
 no ip address
 ipv6 address FE80::2 link-local
 ospfv3 network point-to-point
 ospfv3 1 ipv6 area 0
!
router eigrp JULIOPDX
 !
 address-family ipv6 unicast autonomous-system 123
  !
  af-interface GigabitEthernet0/1
   shutdown
  exit-af-interface
  !
  topology base
  exit-af-topology
  eigrp router-id 2.2.2.2
 exit-address-family
!
router ospfv3 1
 router-id 2.2.2.2
 !
 address-family ipv6 unicast
  passive-interface default
  no passive-interface GigabitEthernet0/1
 exit-address-family
</code></pre></div><h2 id="neighbors-and-routes">Neighbors and Routes</h2>
<p><code>EIGRPv6 Neighbor</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">REDIS#show ipv6 eigrp neighbors
EIGRP-IPv6 VR(JULIOPDX) Address-Family Neighbors for AS(123)
H   Address                 Interface              Hold Uptime   SRTT   RTO  Q  Seq
                                                    (sec)         (ms)       Cnt Num
0   Link-local address:     Gi0/0                    11 00:23:40  275  1650  0  11
     FE80::1
REDIS#
</code></pre></div><p><code>EIGRPv6 Routes</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">REDIS#show ipv6 route eigrp
D   2001:DB8:123:1::/64 [90/10880]
     via FE80::1, GigabitEthernet0/0
D   2001:DB8:123:2::/64 [90/10880]
     via FE80::1, GigabitEthernet0/0
D   2001:DB8:123:3::/64 [90/10880]
     via FE80::1, GigabitEthernet0/0
REDIS#
</code></pre></div><p><code>OSPFv3 Neighbor</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">REDIS#show ipv6 ospf neighbor
        OSPFv3 Router with ID (2.2.2.2) (Process ID 1)
Neighbor ID     Pri   State           Dead Time   Interface ID    Interface
3.3.3.3           0   FULL/  -        00:00:35    1360007168      GigabitEthernet0/1
REDIS#
#### Notice, no DR or BDR due to the point to point network
</code></pre></div><p><code>OSPFv3 Routes</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">REDIS#show ipv6 route ospf
O   2001:DB8:456:4::1/128 [110/1]
     via FE80::3, GigabitEthernet0/1
O   2001:DB8:456:5::1/128 [110/1]
     via FE80::3, GigabitEthernet0/1
O   2001:DB8:456:6::1/128 [110/1]
     via FE80::3, GigabitEthernet0/1
REDIS#
</code></pre></div><p>I wont bother sharing the neighbor states of EIGRPv6 or OSPFv3, but below you will see their routes before redistribution.</p>
<p><code>Routes on Nodes</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">#### EIGRPv6 node first
EIGRPv6#show ipv6 route eigrp
EIGRPv6#
##### Now for OSPFv3 node
OSPFv3# show ipv6 route ospf
No ipv6 routes configured
OSPFv3#
</code></pre></div><h2 id="the-redistribution">The Redistribution</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">REDIS#show run | s router
router eigrp JULIOPDX
 !
 address-family ipv6 unicast autonomous-system 123
  !
  topology base
   redistribute ospf 1 metric 1000000 1 255 1 1500
  exit-af-topology
 exit-address-family
router ospfv3 1
 address-family ipv6 unicast
  redistribute eigrp 123
 exit-address-family
</code></pre></div><p><code>New Routes on OSPFv3 and EIGRPv6</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">EIGRPv6#show ipv6 route eigrp
EX  2001:DB8:456:4::1/128 [170/15360]
     via FE80::2, GigabitEthernet0/0
EX  2001:DB8:456:5::1/128 [170/15360]
     via FE80::2, GigabitEthernet0/0
EX  2001:DB8:456:6::1/128 [170/15360]
     via FE80::2, GigabitEthernet0/0
EIGRPv6#

OSPFv3# show ipv6 route ospf
2001:db8:123:1::/64, vrf default
        via  fe80::2%1/1/1,  [110/20],  ospf
2001:db8:123:2::/64, vrf default
        via  fe80::2%1/1/1,  [110/20],  ospf
2001:db8:123:3::/64, vrf default
        via  fe80::2%1/1/1,  [110/20],  ospf
OSPFv3#
</code></pre></div><h2 id="simple-ping-and-trace">Simple Ping and Trace</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">EIGRPv6#ping 2001:db8:456:4::1
Type escape sequence to abort.
Sending 5, 100-byte ICMP Echos to 2001:DB8:456:4::1, timeout is 2 seconds:
!!!!!
Success rate is 100 percent (5/5), round-trip min/avg/max = 13/18/27 ms
EIGRPv6#traceroute 2001:db8:456:4::1
Type escape sequence to abort.
Tracing the route to 2001:DB8:456:4::1
  1 FE80::2 39 msec 15 msec 16 msec
  2 2001:DB8:456:4::1 13 msec 19 msec 19 msec
EIGRPv6#

OSPFv3# ping6 2001:db8:123:1::1 repetitions 1
PING 2001:db8:123:1::1(2001:db8:123:1::1) 100 data bytes
108 bytes from 2001:db8:123:1::1: icmp_seq=1 ttl=63 time=21.0 ms

--- 2001:db8:123:1::1 ping statistics ---
 1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 21.016/21.016/21.016/0.000 ms
OSPFv3# traceroute6 2001:db8:123:1::1
traceroute to 2001:db8:123:1::1 (2001:db8:123:1::1) from 2001:db8:456:4::1, 30 hops max, 3 sec. timeout, 3 probes, 24 byte packets
 1  fe80::2 (fe80::2)  18.681 ms  13.902 ms  15.768 ms
 2  2001:db8:123:1::1 (2001:db8:123:1::1)  20.081 ms  15.943 ms  19.944 ms
OSPFv3#
</code></pre></div><p>Thank you for reading this far, I really do appreciate it. I wish you the best and I hope you find something useful or interesting in this post. Cheers!</p>
]]></content>
        </item>
        
        <item>
            <title>Simple Radius Server in EVE-NG</title>
            <link>https://juliopdx.github.io/2021/04/16/simple-radius-server-in-eve-ng/</link>
            <pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate>
            
            <guid>https://juliopdx.github.io/2021/04/16/simple-radius-server-in-eve-ng/</guid>
            <description>Introduction I was recently going through an advanced routing course on Pluralsight by Nick Russo, great course by the way. Check it out HERE. During the course we inevitably get to the services portion. The portion most of us dread as network engineers. This is all the extra stuff. Where the routing and switching might be the sexy topic, services is arguably not that exciting… but very much necessary.
If we are in the process of testing AAA, we will need some form of TACACS or RADIUS server.</description>
            <content type="html"><![CDATA[<p><img src="/blog/images/freeradius-new.png" alt="Topology"></p>
<h2 id="introduction">Introduction</h2>
<p>I was recently going through an advanced routing course on Pluralsight by Nick Russo, great course by the way. Check it out HERE. During the course we inevitably get to the services portion. The portion most of us dread as network engineers. This is all the extra stuff. Where the routing and switching might be the sexy topic, services is arguably not that exciting… but very much necessary.</p>
<p>If we are in the process of testing AAA, we will need some form of TACACS or RADIUS server. Deploying a full on RADIUS VM can definitely eat up a lot of resources. GNS3, for example, has an appliance that can be added to provide this functionality. To my knowledge, EVE-NG does not. We will be leveraging FreeRADIUS on a lightweight Ubuntu VM. If you want to learn more about FreeRADIUS, check out the link mentioned below.</p>
<p>I hope to keep this as simple as possible to help the next engineer that has to stand up a simple RADIUS server in their topologies. I will have a few assumptions in this writing. For example, I assume you have some knowledge of using EVE-NG, adding Linux nodes, and most importantly AAA. I will include configurations of the Cisco nodes and useful links at the end of the post!</p>
<h2 id="topology">Topology</h2>
<p>The topology you see above is pretty bare bones. Two nodes running OSPF and all the networks in area 0. One Linux machine will be used for SSH testing and the other is the FreeRADIUS server (Ubuntu 18.04). I linked the image used above but you can use any standard Ubuntu 18.04 image to run FreeRADIUS.</p>
<h2 id="freeradius">FreeRADIUS</h2>
<p>If your topology already has internet access, you may be able to skip a few of these steps. In my case, this topology is isolated. Start by adding a network connection, this will connect the server to my internal network and give the server access to the internet.</p>
<p>Within the VM console session, run the following commands:</p>
<p><code>FreeRADIUS Install</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo apt-get update
sudo apt-get install freeradius -y
</code></pre></div><h2 id="static-ip-for-ubuntu-server">Static IP for Ubuntu Server</h2>
<p>At this point, the server has FreeRADIUS installed. Now we connect the server as shown in the topology image above and assign a static IP address. In Ubuntu 18.04 this can be done by editing the /etc/netplan/01-netcfg.yaml file. You can edit this file using vi, vim, or nano. Doesn&rsquo;t really matter. I believe vi and nano come pre installed on this image. Edit that file and save. Example below.</p>
<p><code>/etc/netplan/01-netcfg.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">network</span>:
   <span style="color:#f92672">version</span>: <span style="color:#ae81ff">2</span>
   <span style="color:#f92672">renderer</span>: <span style="color:#ae81ff">networkd</span>
   <span style="color:#f92672">ethernets</span>:
     <span style="color:#f92672">ens3</span>:
       <span style="color:#f92672">dhcp4</span>: <span style="color:#66d9ef">no</span>
       <span style="color:#f92672">addresses</span>:
         - <span style="color:#ae81ff">192.168.2.2</span><span style="color:#ae81ff">/24</span>
       <span style="color:#f92672">gateway4</span>: <span style="color:#ae81ff">192.168.2.1</span>
</code></pre></div><p>Once that file is saved, run the command below to apply the configuration.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo netplan apply
</code></pre></div><h2 id="add-clients-and-users">Add Clients and Users</h2>
<p>The next step isn’t too bad. You essentially have to modify two files. One for user logins and the other for clients (network devices). The files have a lot of examples and working options. Most all of it is commented out. I’ll include just the portions that are active. Again, feel free to modify this with whatever editor you are comfortable with.</p>
<p><code>/etc/freeradius/3.0/clients.conf</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">client vIOS1 {
    ipaddr = 10.0.0.1
    secret = freeradius
}
client vIOS2 {
    ipaddr = 10.0.0.2
    secret = freeradius
}
</code></pre></div><p><code>/etc/freeradius/3.0/mods-config/files/authorize</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Julio    Cleartext-Password := &#34;PDX&#34;
         Reply-Message = &#34;Welcome to the world of tomorrow&#34;,
         cisco-avpair := &#34;shell:priv-lvl=15&#34;
</code></pre></div><p>Once that is completed, run the following commands to activate FreeRADIUS:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">sudo service freeradius stop
sudo freeradius -X
</code></pre></div><h2 id="ssh-validation">SSH Validation</h2>
<p><img src="/blog/images/ssh_test_radius.png" alt="SSH Test"></p>
<h2 id="outro-and-links">Outro and Links</h2>
<p>Overall I don’t think it was too much work to get this going. If you build in some automation on the radius server, you could populate all the client entries with Ansible or Python. I think someone with a bit more brain power could probably create a pre built image that has FreeRADIUS pre packaged as an EVE-NG appliance. Thank you for reading this far and I hope this helps you down the road. Best of luck!</p>
<ul>
<li><a href="https://www.eve-ng.net/index.php/documentation/howtos/howto-create-own-linux-host-image/">How to add Linux images to EVE-NG</a></li>
<li><a href="https://ipnet.xyz/2018/06/ubuntu-image-for-eve-ng-python-for-network-engineers/">Ubuntu 18.04 image used in lab, can be generic as well</a></li>
<li><a href="https://freeradius.org/">FreeRADIUS Documentation</a></li>
<li><a href="https://linuxize.com/post/how-to-configure-static-ip-address-on-ubuntu-18-04/">Configure static addresses on Ubuntu 18.04</a></li>
<li><a href="/blog/files/vIOS1.txt">vIOS1 Configuration</a></li>
<li><a href="/blog/files/vIOS2.txt">vIOS2 Configuration</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Automating Multi Vendor Environments With Netmiko</title>
            <link>https://juliopdx.github.io/2021/04/02/automating-multi-vendor-environments-with-netmiko/</link>
            <pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate>
            
            <guid>https://juliopdx.github.io/2021/04/02/automating-multi-vendor-environments-with-netmiko/</guid>
            <description>Introduction Hello again! I was working through Nick Russos’ awesome Automating Networks with Python course on Pluralsight, check it out HERE. In the course, Nick does a great job of breaking down the code and the functionality of each bit. I’m still doing a lot of leaning in Python so please bear with me.
The course uses an MPLS environment as an example of network automation with Python. I decided to use the principles taught in the Netmiko portion of the course to try and automate some OSPF between multiple vendors.</description>
            <content type="html"><![CDATA[<p><img src="/blog/images/multi_ospf.png" alt="Multi Routers"></p>
<h2 id="introduction">Introduction</h2>
<p>Hello again! I was working through Nick Russos’ awesome Automating Networks with Python course on Pluralsight, check it out HERE. In the course, Nick does a great job of breaking down the code and the functionality of each bit. I’m still doing a lot of leaning in Python so please bear with me.</p>
<p>The course uses an MPLS environment as an example of network automation with Python. I decided to use the principles taught in the Netmiko portion of the course to try and automate some OSPF between multiple vendors. As you can see above, we are featuring Arista, Aruba, and Cisco. The topology is nothing crazy. All router facing ports are in area 0 and sharing routes. Every router will have a loopback interface to host a network. The only other caveat is that interfaces are passive by default and we enable each interface separately.</p>
<h2 id="host-variables">Host Variables</h2>
<p>Each host has its own variable file. I tried to use something that made sense to me. There’s probably a better way to organize this file, it works, so I can dig it. Below is a sample of the Arista vEOS node. Each one is essentially the same besides two or three variables.</p>
<p><code>vEOS.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#f92672">hostname</span>: <span style="color:#ae81ff">vEOS</span>
<span style="color:#f92672">interfaces</span>:
  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Ethernet1</span>
    <span style="color:#f92672">ip</span>: <span style="color:#ae81ff">10.0.0.2</span><span style="color:#ae81ff">/24</span>
    <span style="color:#f92672">ospf</span>:
      <span style="color:#f92672">process</span>: <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">area</span>: <span style="color:#ae81ff">0</span>
      <span style="color:#f92672">passive</span>: <span style="color:#66d9ef">False</span>
  - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Loopback0</span>
    <span style="color:#f92672">ip</span>: <span style="color:#ae81ff">192.168.2.1</span><span style="color:#ae81ff">/24</span>
    <span style="color:#f92672">ospf</span>:
      <span style="color:#f92672">process</span>: <span style="color:#ae81ff">1</span>
      <span style="color:#f92672">area</span>: <span style="color:#ae81ff">1</span>
<span style="color:#f92672">ospf</span>:
  <span style="color:#f92672">process</span>: <span style="color:#ae81ff">1</span>
  <span style="color:#f92672">router_id</span>: <span style="color:#ae81ff">2.2.2.2</span>
  <span style="color:#f92672">area</span>:
    - <span style="color:#ae81ff">0</span>
    - <span style="color:#ae81ff">1</span>
</code></pre></div><h2 id="ospf-and-jinja">OSPF and Jinja</h2>
<p>The jinja file process isn’t too bad. If you know loops, if, and else statements, you’ll be just fine. I’m pretty familiar with Aruba and Cisco but not so much with Arista. Lucky for me Arista is eerily similar to Cisco Syntax. I generally work my way through configuring the devices manually once and then convert the configurations to a template. Below is the Aruba version of the jinja template, each vendor gets its own jinja file.</p>
<p><code>hp_procurve.j2</code></p>
<pre><code class="language-jinja2" data-lang="jinja2">{% if data.ospf %}
router ospf {{ data.ospf.process }}
    router-id {{ data.ospf.router_id }}
    passive-interface default
{% for area in data.ospf.areas %}
    area {{ area }}
{% endfor %}
{% for int in data.interfaces %}
{% if int.ospf %}
interface {{ int.name }}
{% if &quot;back&quot; not in int.name %}
    no shutdown
{% endif%}
    ip address {{ int.ip }}
    ip ospf {{ int.ospf.process }} area {{ int.ospf.area }}
{% if int.ospf.passive == False %}
    no ip ospf passive
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
copy running-config startup-config
</code></pre><h2 id="the-script">The Script</h2>
<p>I wont go too deep in breaking down the file as I think it would take a while and I would really recommend you check out Nicks’ course I linked above. If I were to break down the script at a high level, below are the steps that are being performed.</p>
<ul>
<li>Import the required libraries.</li>
<li>Define functions for address management (more on this later).</li>
<li>Define the main function to load in host variables, jinja environment, and loop over each host.</li>
<li>Bonus, network backup task (why not?).</li>
</ul>
<p><code>ospf_netmiko.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#! /usr/bin/env python</span>

<span style="color:#75715e"># Import requirements</span>
<span style="color:#f92672">from</span> yaml <span style="color:#f92672">import</span> safe_load
<span style="color:#f92672">from</span> netmiko <span style="color:#f92672">import</span> Netmiko
<span style="color:#f92672">from</span> jinja2 <span style="color:#f92672">import</span> Environment, FileSystemLoader
<span style="color:#f92672">from</span> netaddr <span style="color:#f92672">import</span> IPNetwork
<span style="color:#f92672">from</span> rich <span style="color:#f92672">import</span> <span style="color:#66d9ef">print</span> <span style="color:#66d9ef">as</span> pr

<span style="color:#75715e"># functions to be used in jinja templates for IP management</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">address</span>(a):
    a <span style="color:#f92672">=</span> str(IPNetwork(a)<span style="color:#f92672">.</span>ip)
    <span style="color:#66d9ef">return</span> a


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mask</span>(b):
    b <span style="color:#f92672">=</span> str(IPNetwork(b)<span style="color:#f92672">.</span>netmask)
    <span style="color:#66d9ef">return</span> b


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>():

    <span style="color:#75715e"># Open hosts file as variable for future use</span>
    <span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;hosts.yaml&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> handle:
        host_root <span style="color:#f92672">=</span> safe_load(handle)
    pr(host_root)

    <span style="color:#75715e"># Set platform map to match netmiko</span>
    platform_map <span style="color:#f92672">=</span> {<span style="color:#e6db74">&#34;ios&#34;</span>: <span style="color:#e6db74">&#34;cisco_ios&#34;</span>, <span style="color:#e6db74">&#34;arista&#34;</span>: <span style="color:#e6db74">&#34;arista_eos&#34;</span>, <span style="color:#e6db74">&#34;aruba&#34;</span>: <span style="color:#e6db74">&#34;hp_procurve&#34;</span>}

    <span style="color:#75715e"># Assigning platform variable to each host</span>
    <span style="color:#66d9ef">for</span> host <span style="color:#f92672">in</span> host_root[<span style="color:#e6db74">&#34;host_list&#34;</span>]:
        platform <span style="color:#f92672">=</span> platform_map[host[<span style="color:#e6db74">&#34;platform&#34;</span>]]

        <span style="color:#75715e"># Load in the host specific vars</span>
        <span style="color:#66d9ef">with</span> open(f<span style="color:#e6db74">&#34;vars/{host[&#39;name&#39;]}.yaml&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> handle:
            ospf <span style="color:#f92672">=</span> safe_load(handle)

        <span style="color:#75715e"># This portion is essentially configuring our jinja environment</span>
        j2_env <span style="color:#f92672">=</span> Environment(
            loader<span style="color:#f92672">=</span>FileSystemLoader(<span style="color:#e6db74">&#34;.&#34;</span>), trim_blocks<span style="color:#f92672">=</span>True, autoescape<span style="color:#f92672">=</span>True
        )
        <span style="color:#75715e"># https://www.kite.com/python/answers/how-to-call-a-function-in-a-jinja2-template-in-python</span>
        j2_env<span style="color:#f92672">.</span>globals[<span style="color:#e6db74">&#34;address&#34;</span>] <span style="color:#f92672">=</span> address
        j2_env<span style="color:#f92672">.</span>globals[<span style="color:#e6db74">&#34;mask&#34;</span>] <span style="color:#f92672">=</span> mask

        template <span style="color:#f92672">=</span> j2_env<span style="color:#f92672">.</span>get_template(f<span style="color:#e6db74">&#34;templates/netmiko/{platform}.j2&#34;</span>)
        new_ospf_config <span style="color:#f92672">=</span> template<span style="color:#f92672">.</span>render(data<span style="color:#f92672">=</span>ospf)
        pr(f<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{new_ospf_config}&#34;</span>)

        conn <span style="color:#f92672">=</span> Netmiko(
            host<span style="color:#f92672">=</span>host[<span style="color:#e6db74">&#34;mgmt&#34;</span>],
            username<span style="color:#f92672">=</span>host[<span style="color:#e6db74">&#34;username&#34;</span>],
            password<span style="color:#f92672">=</span>host[<span style="color:#e6db74">&#34;password&#34;</span>],
            device_type<span style="color:#f92672">=</span>platform,
        )

        pr(f<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">#### Logged into {conn.find_prompt()}, woohoo! ####&#34;</span>)

        result <span style="color:#f92672">=</span> conn<span style="color:#f92672">.</span>send_config_set(new_ospf_config<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>))

        <span style="color:#66d9ef">print</span>(result)

        <span style="color:#66d9ef">with</span> open(f<span style="color:#e6db74">&#34;backups/{host[&#39;name&#39;]}.conf&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>) <span style="color:#66d9ef">as</span> writer:
            result <span style="color:#f92672">=</span> conn<span style="color:#f92672">.</span>send_command(<span style="color:#e6db74">&#34;show run&#34;</span>)
            writer<span style="color:#f92672">.</span>writelines(result)

        conn<span style="color:#f92672">.</span>disconnect()


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    main()
</code></pre></div><h2 id="bonus-the-ansibilism">Bonus, The Ansibilism</h2>
<p>Something you will run into when diving into network automation is address management. Hmm or should I say address format conversion. Some network operating systems accept the format of “192.168.1.1/24” for address assignment and others accept “192.168.1.1 255.255.255.255.0”. My background is more in Ansible and I would usually do something like the following.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">address <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;192.168.1.1/24&#34;</span>
<span style="color:#75715e"># Jinja</span>
interface gig0<span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>
   ip address {{ address <span style="color:#f92672">|</span> ipaddr(<span style="color:#e6db74">&#39;address&#39;</span>) }} {{ address <span style="color:#f92672">|</span> ipaddr(<span style="color:#e6db74">&#39;netmask&#39;</span>) }}
   no shutdown
</code></pre></div><p>I was curious if something similar was available when using Jinja in Python. Honestly, I’m not sure and I bet there’s an easier way. If there is please let me know, and tell me “this is the way”. Long story short, this led me to the link included in the script and a bit of time on the python interpreter for testing. My testing went something like the following.</p>
<p><code>testing</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">from</span> netaddr <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
In [<span style="color:#ae81ff">2</span>]: a <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;192.168.1.1/24&#34;</span>
In [<span style="color:#ae81ff">3</span>]: str(IPNetwork(a)<span style="color:#f92672">.</span>ip)
Out[<span style="color:#ae81ff">3</span>]: <span style="color:#e6db74">&#39;192.168.1.1&#39;</span>
In [<span style="color:#ae81ff">4</span>]: str(IPNetwork(a)<span style="color:#f92672">.</span>netmask)
Out[<span style="color:#ae81ff">4</span>]: <span style="color:#e6db74">&#39;255.255.255.0&#39;</span>
In [<span style="color:#ae81ff">5</span>]:
</code></pre></div><p>Now that I had the format, I created two functions, one for the address portion and one for the netmask. Ill show the relevant snippets from all the pieces involved below!</p>
<p><code>Odds and Ends</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> netaddr <span style="color:#f92672">import</span> IPNetwork

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">address</span>(a):
    a <span style="color:#f92672">=</span> str(IPNetwork(a)<span style="color:#f92672">.</span>ip)
    <span style="color:#66d9ef">return</span> a


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">mask</span>(b):
    b <span style="color:#f92672">=</span> str(IPNetwork(b)<span style="color:#f92672">.</span>netmask)
    <span style="color:#66d9ef">return</span> b

<span style="color:#75715e"># https://www.kite.com/python/answers/how-to-call-a-function-in-a-jinja2-template-in-python</span>
        j2_env<span style="color:#f92672">.</span>globals[<span style="color:#e6db74">&#34;address&#34;</span>] <span style="color:#f92672">=</span> address
        j2_env<span style="color:#f92672">.</span>globals[<span style="color:#e6db74">&#34;mask&#34;</span>] <span style="color:#f92672">=</span> mask

<span style="color:#75715e"># From Template</span>
ip address {{ address(int<span style="color:#f92672">.</span>ip) }} {{ mask(int<span style="color:#f92672">.</span>ip) }}
</code></pre></div><h1 id="script-output">Script Output</h1>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">{
     <span style="color:#e6db74">&#39;host_list&#39;</span>: [
         {
             <span style="color:#e6db74">&#39;name&#39;</span>: <span style="color:#e6db74">&#39;vIOS&#39;</span>,
             <span style="color:#e6db74">&#39;platform&#39;</span>: <span style="color:#e6db74">&#39;ios&#39;</span>,
             <span style="color:#e6db74">&#39;mgmt&#39;</span>: <span style="color:#e6db74">&#39;192.168.10.122&#39;</span>,
             <span style="color:#e6db74">&#39;username&#39;</span>: <span style="color:#e6db74">&#39;cisco&#39;</span>,
             <span style="color:#e6db74">&#39;password&#39;</span>: <span style="color:#e6db74">&#39;cisco&#39;</span>
         },
         {
             <span style="color:#e6db74">&#39;name&#39;</span>: <span style="color:#e6db74">&#39;ArubaCX&#39;</span>,
             <span style="color:#e6db74">&#39;platform&#39;</span>: <span style="color:#e6db74">&#39;aoscx&#39;</span>,
             <span style="color:#e6db74">&#39;mgmt&#39;</span>: <span style="color:#e6db74">&#39;192.168.10.142&#39;</span>,
             <span style="color:#e6db74">&#39;username&#39;</span>: <span style="color:#e6db74">&#39;admin&#39;</span>,
             <span style="color:#e6db74">&#39;password&#39;</span>: <span style="color:#e6db74">&#39;aruba&#39;</span>
         },
         {
             <span style="color:#e6db74">&#39;name&#39;</span>: <span style="color:#e6db74">&#39;vEOS&#39;</span>,
             <span style="color:#e6db74">&#39;platform&#39;</span>: <span style="color:#e6db74">&#39;eos&#39;</span>,
             <span style="color:#e6db74">&#39;mgmt&#39;</span>: <span style="color:#e6db74">&#39;192.168.10.151&#39;</span>,
             <span style="color:#e6db74">&#39;username&#39;</span>: <span style="color:#e6db74">&#39;admin&#39;</span>,
             <span style="color:#e6db74">&#39;password&#39;</span>: <span style="color:#e6db74">&#39;arista&#39;</span>
         }
     ]
 }
 Configuration to be loaded on vIOS:
 router ospf <span style="color:#ae81ff">1</span>
     router<span style="color:#f92672">-</span>id <span style="color:#ae81ff">3.3</span><span style="color:#f92672">.</span><span style="color:#ae81ff">3.3</span>
     passive<span style="color:#f92672">-</span>interface default
     no passive<span style="color:#f92672">-</span>interface GigabitEthernet0<span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>
 interface GigabitEthernet0<span style="color:#f92672">/</span><span style="color:#ae81ff">0</span>
     no shutdown
     ip address <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">0.3</span> <span style="color:#ae81ff">255.255</span><span style="color:#f92672">.</span><span style="color:#ae81ff">255.0</span>
     ip ospf <span style="color:#ae81ff">1</span> area <span style="color:#ae81ff">0</span>
 interface Loopback0
     ip address <span style="color:#ae81ff">192.168</span><span style="color:#f92672">.</span><span style="color:#ae81ff">3.1</span> <span style="color:#ae81ff">255.255</span><span style="color:#f92672">.</span><span style="color:#ae81ff">255.0</span>
     ip ospf <span style="color:#ae81ff">1</span> area <span style="color:#ae81ff">1</span>
 do wr
 Logged into vIOS<span style="color:#75715e">#, woohoo!</span>
 configure terminal
 Enter configuration commands, one per line<span style="color:#f92672">.</span>  End <span style="color:#66d9ef">with</span> CNTL<span style="color:#f92672">/</span>Z<span style="color:#f92672">.</span>
 vIOS(config)<span style="color:#75715e">#router ospf 1</span>
 vIOS(config<span style="color:#f92672">-</span>router)<span style="color:#75715e">#    router-id 3.3.3.3</span>
 vIOS(config<span style="color:#f92672">-</span>router)<span style="color:#75715e">#    passive-interface default</span>
 vIOS(config<span style="color:#f92672">-</span>router)<span style="color:#75715e">#    no passive-interface GigabitEthernet0/0</span>
 vIOS(config<span style="color:#f92672">-</span>router)<span style="color:#75715e">#interface GigabitEthernet0/0</span>
 vIOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#    no shutdown</span>
 vIOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#    ip address 10.0.0.3 255.255.255.0</span>
 vIOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#    ip ospf 1 area 0</span>
 vIOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#interface Loopback0</span>
 vIOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#    ip address 192.168.3.1 255.255.255.0</span>
 vIOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#    ip ospf 1 area 1</span>
 vIOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#do wr</span>
 Building configuration<span style="color:#960050;background-color:#1e0010">…</span>
 [OK]
 vIOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#end</span>
 vIOS<span style="color:#75715e">#</span>
 Configuration to be loaded on ArubaCX:
 router ospf <span style="color:#ae81ff">1</span>
     router<span style="color:#f92672">-</span>id <span style="color:#ae81ff">1.1</span><span style="color:#f92672">.</span><span style="color:#ae81ff">1.1</span>
     passive<span style="color:#f92672">-</span>interface default
     area <span style="color:#ae81ff">0.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">0.0</span>
     area <span style="color:#ae81ff">0.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">0.1</span>
 interface <span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">1</span>
     no shutdown
     ip address <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">0.1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">24</span>
     ip ospf <span style="color:#ae81ff">1</span> area <span style="color:#ae81ff">0.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">0.0</span>
     no ip ospf passive
 interface loopback <span style="color:#ae81ff">0</span>
     ip address <span style="color:#ae81ff">192.168</span><span style="color:#f92672">.</span><span style="color:#ae81ff">1.1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">24</span>
     ip ospf <span style="color:#ae81ff">1</span> area <span style="color:#ae81ff">0.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">0.1</span>
 copy running<span style="color:#f92672">-</span>config startup<span style="color:#f92672">-</span>config
 Logged into ArubaCX<span style="color:#75715e">#, woohoo!</span>
 configure terminal
 ArubaCX(config)<span style="color:#75715e"># router ospf 1</span>
 ArubaCX(config<span style="color:#f92672">-</span>ospf<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#75715e">#     router-id 1.1.1.1</span>
 ArubaCX(config<span style="color:#f92672">-</span>ospf<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#75715e">#     passive-interface default</span>
 ArubaCX(config<span style="color:#f92672">-</span>ospf<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#75715e">#     area 0.0.0.0</span>
 ArubaCX(config<span style="color:#f92672">-</span>ospf<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#75715e">#     area 0.0.0.1</span>
 ArubaCX(config<span style="color:#f92672">-</span>ospf<span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>)<span style="color:#75715e"># interface 1/1/1</span>
 ArubaCX(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#     no shutdown</span>
 ArubaCX(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#     ip address 10.0.0.1/24</span>
 ArubaCX(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#     ip ospf 1 area 0.0.0.0</span>
 ArubaCX(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#     no ip ospf passive</span>
 ArubaCX(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e"># interface loopback 0</span>
 ArubaCX(config<span style="color:#f92672">-</span>loopback<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#     ip address 192.168.1.1/24</span>
 ArubaCX(config<span style="color:#f92672">-</span>loopback<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e">#     ip ospf 1 area 0.0.0.1</span>
 ArubaCX(config<span style="color:#f92672">-</span>loopback<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e"># copy running-config startup-config</span>
 Copying configuration: []
 Copying configuration: [<span style="color:#f92672">|</span>]
 Copying configuration: [<span style="color:#f92672">/</span>]
 Copying configuration: [<span style="color:#f92672">-</span>]
 Copying configuration: []
 Copying configuration: [<span style="color:#f92672">|</span>]
 Copying configuration: [<span style="color:#f92672">/</span>]
 Copying configuration: [<span style="color:#f92672">-</span>]
 Copying configuration: [Success]
 ArubaCX(config<span style="color:#f92672">-</span>loopback<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span>)<span style="color:#75715e"># end</span>
 ArubaCX<span style="color:#75715e">#</span>
 Configuration to be loaded on vEOS:
 ip routing
 router ospf <span style="color:#ae81ff">1</span>
     router<span style="color:#f92672">-</span>id <span style="color:#ae81ff">2.2</span><span style="color:#f92672">.</span><span style="color:#ae81ff">2.2</span>
     passive<span style="color:#f92672">-</span>interface default
     no passive<span style="color:#f92672">-</span>interface Ethernet1
 interface Ethernet1
     no switchport
     no shutdown
     ip address <span style="color:#ae81ff">10.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">0.2</span><span style="color:#f92672">/</span><span style="color:#ae81ff">24</span>
     ip ospf area <span style="color:#ae81ff">0.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">0.0</span>
 interface Loopback0
     ip address <span style="color:#ae81ff">192.168</span><span style="color:#f92672">.</span><span style="color:#ae81ff">2.1</span><span style="color:#f92672">/</span><span style="color:#ae81ff">24</span>
     ip ospf area <span style="color:#ae81ff">0.0</span><span style="color:#f92672">.</span><span style="color:#ae81ff">0.1</span>
 do wr
 Logged into vEOS<span style="color:#75715e">#, woohoo!</span>
 configure terminal
 vEOS(config)<span style="color:#75715e">#ip routing</span>
 vEOS(config)<span style="color:#75715e">#router ospf 1</span>
 vEOS(config<span style="color:#f92672">-</span>router<span style="color:#f92672">-</span>ospf)<span style="color:#75715e">#    router-id 2.2.2.2</span>
 vEOS(config<span style="color:#f92672">-</span>router<span style="color:#f92672">-</span>ospf)<span style="color:#75715e">#    passive-interface default</span>
 vEOS(config<span style="color:#f92672">-</span>router<span style="color:#f92672">-</span>ospf)<span style="color:#75715e">#    no passive-interface Ethernet1</span>
 vEOS(config<span style="color:#f92672">-</span>router<span style="color:#f92672">-</span>ospf)<span style="color:#75715e">#interface Ethernet1</span>
 vEOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span><span style="color:#f92672">-</span>Et1)<span style="color:#75715e">#    no switchport</span>
 vEOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span><span style="color:#f92672">-</span>Et1)<span style="color:#75715e">#    no shutdown</span>
 vEOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span><span style="color:#f92672">-</span>Et1)<span style="color:#75715e">#    ip address 10.0.0.2/24</span>
 vEOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span><span style="color:#f92672">-</span>Et1)<span style="color:#75715e">#    ip ospf area 0.0.0.0</span>
 vEOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span><span style="color:#f92672">-</span>Et1)<span style="color:#75715e">#interface Loopback0</span>
 vEOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span><span style="color:#f92672">-</span>Lo0)<span style="color:#75715e">#    ip address 192.168.2.1/24</span>
 vEOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span><span style="color:#f92672">-</span>Lo0)<span style="color:#75715e">#    ip ospf area 0.0.0.1</span>
 vEOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span><span style="color:#f92672">-</span>Lo0)<span style="color:#75715e">#do wr</span>
 Copy completed successfully<span style="color:#f92672">.</span>
 vEOS(config<span style="color:#f92672">-</span><span style="color:#66d9ef">if</span><span style="color:#f92672">-</span>Lo0)<span style="color:#75715e">#end</span>
 vEOS<span style="color:#75715e">#</span>
</code></pre></div><h2 id="outro-and-links">Outro and Links</h2>
<p>Thank you for reading this far. I really do appreciate it. Stay safe and cheers!</p>
<ul>
<li><a href="https://www.pluralsight.com/authors/nick-russo">Courses by Nick Russo</a></li>
<li><a href="https://github.com/JulioPDX/multi-vendor-python">GitHub Repo</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Aruba Spine Leaf Deployment With OSPFv3 and Link Local Addresses</title>
            <link>https://juliopdx.github.io/2021/03/29/aruba-spine-leaf-deployment-with-ospfv3-and-link-local-addresses/</link>
            <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
            
            <guid>https://juliopdx.github.io/2021/03/29/aruba-spine-leaf-deployment-with-ospfv3-and-link-local-addresses/</guid>
            <description>Introduction I was recently on my way to finishing IPv6 Fundamentals by Rick Graziani. I will admit I’m not the fastest reader! In the book Rick mentions the following:
 You could configure router R2’s interfaces with only link-local addresses, no global unicast addresses. This is because R2 has no end user interfaces. RFC 7404, Using Only Link-Local Addressing inside an IPv6 Network, discusses implementing routing protocols using only link-local addresses on infrastructure links.</description>
            <content type="html"><![CDATA[<p><img src="/blog/images/leaf_spine_link_local.png" alt="Link Local"></p>
<h2 id="introduction">Introduction</h2>
<p>I was recently on my way to finishing IPv6 Fundamentals by Rick Graziani. I will admit I’m not the fastest reader! In the book Rick mentions the following:</p>
<blockquote>
<p>You could configure router R2’s interfaces with only link-local addresses, no global unicast addresses. This is because R2 has no end user interfaces. RFC 7404, Using Only Link-Local Addressing inside an IPv6 Network, discusses implementing routing protocols using only link-local addresses on infrastructure links.</p>
</blockquote>
<p>In my previous post about deploying an Aruba spine leaf, I mentioned the possibility of wasting IP space. In IPv6, we do have an abundance of IP space, but this is still something the operator would have to maintain and work into their workflow or automation. Once I read this, I immediately looked up <a href="https://datatracker.ietf.org/doc/html/rfc7404">RFC 7404</a> “Using Only Link-Local Addressing inside an IPv6 Network”. The RFC does a really great job of breaking down the pros and cons. In this post we’ll be going over the pros. If want to learn more, feel free to check out the RFC.</p>
<p>Here is a list of a few of the advantages this provides. We’ll be going over most of these in this post.</p>
<ul>
<li>Simple address management (automation)</li>
<li>Lower configuration complexity (automation and reduced errors)</li>
<li>Smaller routing tables</li>
<li>Reduced attack surface (less routed links)</li>
</ul>
<h2 id="simple-address-management">Simple Address Management</h2>
<p>If you recall from the previous post, we had to assign the IPv6 equivalent of a point to point address on each spine to leaf connections. This would increase the amount of IP addresses used as well as burden the operator to maintain these configurations. When assigning a link local address on a router, we can essentially assign the same address to each interface. One note as well, I mentioned that Aruba did not support IP unnumbered in the last post. If you are assigning the same address to each interface, we are essentially arriving at the same objective. Below is a sample configuration of a leaf and spine router. Please be aware that we are still configuring a global unicast address (GUA) on a loopback for these devices. This can also be used for device connections (SSH) or handling traffic to NMS.</p>
<p><code>Spine01 Configuration</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">interface 1/1/1
     no shutdown
     description link to leaf01
     ipv6 address link-local fe80:face:cafe::1/64
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
 interface 1/1/2
     no shutdown
     description link to leaf02
     ipv6 address link-local fe80:face:cafe::1/64
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
 interface 1/1/3
     no shutdown
     description link to leaf03
     ipv6 address link-local fe80:face:cafe::1/64
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
 interface 1/1/4
     no shutdown
     description link to leaf04
     ipv6 address link-local fe80:face:cafe::1/64
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
 interface loopback 0
     ipv6 address link-local fe80:face:cafe::1/64
     ipv6 address 2001:db8:cafe:ffff::1/128
     ipv6 ospfv3 1 area 0.0.0.0
 !
 router ospfv3 1
     router-id 1.1.1.1
     passive-interface default
     area 0.0.0.0
</code></pre></div><p>Only the loopback 0 interface on spine01 has a GUA. Essentially, every interface connected to the leaf nodes has the exact same configuration. Easy win for our automation folks!</p>
<p><code>Leaf01 Configuration</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">lan 1,10
 interface mgmt
     no shutdown
     ip dhcp
 interface 1/1/1
     no shutdown
     description link to spine01
     ipv6 address link-local fe80:beef:cafe::1/64
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
 interface 1/1/2
     no shutdown
     description link to spine02
     ipv6 address link-local fe80:beef:cafe::1/64
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
 interface 1/1/6
     no shutdown
     description link to Linux1
     no routing
     vlan access 10
 interface loopback 0
     ipv6 address link-local fe80:beef:cafe::1/64
     ipv6 address 2001:db8:cafe:fd00::1/128
     ipv6 ospfv3 1 area 0.0.0.0
 interface vlan 10
     ipv6 address link-local fe80:beef:cafe::1/64
     ipv6 address 2001:db8:cafe🅰️:1/64
     no ipv6 nd suppress-ra
     ipv6 ospfv3 1 area 0.0.0.0
 !
 router ospfv3 1
     router-id 10.0.0.1
     passive-interface default
     area 0.0.0.0
</code></pre></div><p>Difference in leaf nodes are the port VLAN assignments and VLAN interfaces.</p>
<h2 id="lower-configuration-complexity">Lower Configuration Complexity</h2>
<p>My main background on automation is around Ansible. I will provide some basic YAML variable file as an idea on how the configuration has been simplified. I’ll use spine01 for this example.</p>
<p><code>Spine01 variables with GUA addresses</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#f92672">hostname</span>: <span style="color:#ae81ff">spine01</span>
<span style="color:#f92672">link_local</span>: <span style="color:#ae81ff">fe80:face:cafe::1/64</span>
<span style="color:#f92672">interfaces</span>:
  <span style="color:#f92672">1/1/1</span>:
    <span style="color:#f92672">ipv6_address</span>: <span style="color:#ae81ff">2001</span>:<span style="color:#ae81ff">db8:cafe:fe01::a/127</span>
    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">link to leaf01</span>
  <span style="color:#f92672">1/1/2</span>:
    <span style="color:#f92672">ipv6_address</span>: <span style="color:#ae81ff">2001</span>:<span style="color:#ae81ff">db8:cafe:fe02::a/127</span>
    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">link to leaf02</span>
  <span style="color:#f92672">1/1/3</span>:
    <span style="color:#f92672">ipv6_address</span>: <span style="color:#ae81ff">2001</span>:<span style="color:#ae81ff">db8:cafe:fe03::a/127</span>
    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">link to leaf03</span>
  <span style="color:#f92672">1/1/4</span>:
    <span style="color:#f92672">ipv6_address</span>: <span style="color:#ae81ff">2001</span>:<span style="color:#ae81ff">db8:cafe:fe04::a/127</span>
    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">link to leaf04</span>
  <span style="color:#f92672">loopback0</span>:
    <span style="color:#f92672">ipv6_address</span>: <span style="color:#ae81ff">2001</span>:<span style="color:#ae81ff">db8:cafe:ffff::1/128</span>
</code></pre></div><p><code>Spine01 variables with only link-local</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#f92672">hostname</span>: <span style="color:#ae81ff">spine01</span>
<span style="color:#f92672">link_local</span>: <span style="color:#ae81ff">fe80:face:cafe::1/64</span>
<span style="color:#f92672">interfaces</span>:
  <span style="color:#f92672">1/1/1</span>:
    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">link to leaf01</span>
  <span style="color:#f92672">1/1/2</span>:
    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">link to leaf02</span>
  <span style="color:#f92672">1/1/3</span>:
    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">link to leaf03</span>
  <span style="color:#f92672">1/1/4</span>:
    <span style="color:#f92672">description</span>: <span style="color:#ae81ff">link to leaf04</span>
  <span style="color:#f92672">loopback0</span>:
    <span style="color:#f92672">ipv6_address</span>: <span style="color:#ae81ff">2001</span>:<span style="color:#ae81ff">db8:cafe:ffff::1/128</span>
</code></pre></div><p>The example is basic in nature but you can see how mistakes can be reduced and configuration can be simplified.</p>
<h2 id="smaller-routing-tables">Smaller Routing Tables</h2>
<p>Since we are using link local addresses, they have a scope that is… local to the link. The routing protocols will not propagate this as reachable networks, this in turn will reduce the total size of our routing tables. This has a great benefit of saving memory and speeding up convergence times. For comparison, check out the routing table on leaf01 when using GUA addresses and only using link local.</p>
<p><code>Using GUA /127 addresses</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">leaf01# show ipv6 ospfv3 routes | b 2001
  2001:db8:cafe🅰️:/64 (i) area:0.0.0.0
       directly attached to interface vlan10, cost 100 distance 110
  2001:db8:cafe:14::/64 (i) area:0.0.0.0
       via fe80:face:cafe::1 interface 1/1/1, cost 300 distance 110
  2001:db8:cafe:14::/64 (i) area:0.0.0.0
       via fe80:face:cafe::2 interface 1/1/2, cost 300 distance 110
  2001:db8:cafe:1e::/64 (i) area:0.0.0.0
       via fe80:face:cafe::1 interface 1/1/1, cost 300 distance 110
  2001:db8:cafe:1e::/64 (i) area:0.0.0.0
       via fe80:face:cafe::2 interface 1/1/2, cost 300 distance 110
  2001:db8:cafe:28::/64 (i) area:0.0.0.0
       via fe80:face:cafe::1 interface 1/1/1, cost 300 distance 110
  2001:db8:cafe:28::/64 (i) area:0.0.0.0
       via fe80:face:cafe::2 interface 1/1/2, cost 300 distance 110
  2001:db8:cafe:fd00::2/128 (i) area:0.0.0.0
       via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
  2001:db8:cafe:fd00::2/128 (i) area:0.0.0.0
       via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
  2001:db8:cafe:fd00::3/128 (i) area:0.0.0.0
       via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
  2001:db8:cafe:fd00::3/128 (i) area:0.0.0.0
       via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
  2001:db8:cafe:fd00::4/128 (i) area:0.0.0.0
       via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
  2001:db8:cafe:fd00::4/128 (i) area:0.0.0.0
       via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
  2001:db8:cafe:fe01::a/127 (i) area:0.0.0.0
       directly attached to interface 1/1/1, cost 100 distance 110
  2001:db8:cafe:fe02::a/127 (i) area:0.0.0.0
       via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
  2001:db8:cafe:fe03::a/127 (i) area:0.0.0.0
       via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
  2001:db8:cafe:fe04::a/127 (i) area:0.0.0.0
       via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
  2001:db8:cafe:ff01::a/127 (i) area:0.0.0.0
       directly attached to interface 1/1/2, cost 100 distance 110
  2001:db8:cafe:ff02::a/127 (i) area:0.0.0.0
       via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
  2001:db8:cafe:ff03::a/127 (i) area:0.0.0.0
       via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
  2001:db8:cafe:ff04::a/127 (i) area:0.0.0.0
       via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
  2001:db8:cafe:ffff::1/128 (i) area:0.0.0.0
       via fe80:face:cafe::1 interface 1/1/1, cost 100 distance 110
  2001:db8:cafe:ffff::2/128 (i) area:0.0.0.0
       via fe80:face:cafe::2 interface 1/1/2, cost 100 distance 110
</code></pre></div><p><code>Only link local addresses</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">leaf01#   show ipv6 ospfv3 routes | b 2001
 2001:db8:cafe🅰️:/64 (i) area:0.0.0.0
      directly attached to interface vlan10, cost 100 distance 110
 2001:db8:cafe:14::/64 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 300 distance 110
 2001:db8:cafe:14::/64 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 300 distance 110
 2001:db8:cafe:1e::/64 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 300 distance 110
 2001:db8:cafe:1e::/64 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 300 distance 110
 2001:db8:cafe:28::/64 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 300 distance 110
 2001:db8:cafe:28::/64 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 300 distance 110
 2001:db8:cafe:fd00::2/128 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
 2001:db8:cafe:fd00::2/128 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
 2001:db8:cafe:fd00::3/128 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
 2001:db8:cafe:fd00::3/128 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
 2001:db8:cafe:fd00::4/128 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
 2001:db8:cafe:fd00::4/128 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
 2001:db8:cafe:ffff::1/128 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 100 distance 110
 2001:db8:cafe:ffff::2/128 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 100 distance 110
</code></pre></div><p><code>Trace from leaf01 and linux04</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">leaf01# traceroute6 2001:db8:cafe:28:5200:ff:fe0a:0
 traceroute to 2001:db8:cafe:28:5200:ff:fe0a:0 (2001:db8:cafe:28:5200:ff:fe0a:0) from 2001:db8:cafe🅰️:1, 30 hops max, 3 sec. timeout, 3 probes, 24 byte packets
  1  2001:db8:cafe:ffff::1 (2001:db8:cafe:ffff::1)  4.712 ms  70.151 ms  24.438 ms
  2  2001:db8:cafe:28::1 (2001:db8:cafe:28::1)  18.437 ms  58.055 ms  17.812 ms
  3  2001:db8:cafe:28:5200:ff:fe0a:0 (2001:db8:cafe:28:5200:ff:fe0a:0)  12.547 ms  53.539 ms  17.951 ms
 leaf01#
</code></pre></div><p>Last little bit, if you notice the output of the trace, the first hop is the GUA of loopback0 on spine01</p>
<h2 id="wrap-up">Wrap Up</h2>
<p>Thank you for reading this far, I really do appreciate it. If you want to learn more on using link-local addresses between router links, check out <a href="https://datatracker.ietf.org/doc/html/rfc7404">RFC 7404</a>! Take care and stay safe! Cheers!</p>
<ul>
<li>Previous post: <a href="https://juliopdx.com/2021/03/18/aruba-spine-leaf-with-ospfv3-and-ipv6/">Aruba Spine Leaf with OSPFv3 and IPv6</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Aruba Spine Leaf With OSPFv3 and IPv6</title>
            <link>https://juliopdx.github.io/2021/03/18/aruba-spine-leaf-with-ospfv3-and-ipv6/</link>
            <pubDate>Thu, 18 Mar 2021 00:00:00 +0000</pubDate>
            
            <guid>https://juliopdx.github.io/2021/03/18/aruba-spine-leaf-with-ospfv3-and-ipv6/</guid>
            <description>Introduction Hello and thank you for checking out this post! In this post I hope to breakdown the topology you see above. I’ll walk through the design, IPv6 IP allocations, and OSPFv3. I have a very small background in IPv6, basically enough to get past a few Cisco exams, which inevitably gets forgotten about after some time of little to no use. I purchased IPv6 Fundamentals by Rick Graziani, I want to say almost a year ago.</description>
            <content type="html"><![CDATA[<p><img src="/blog/images/aruba_spine_leaf.png" alt="Aruba Spine Leaf"></p>
<h2 id="introduction">Introduction</h2>
<p>Hello and thank you for checking out this post! In this post I hope to breakdown the topology you see above. I’ll walk through the design, IPv6 IP allocations, and OSPFv3. I have a very small background in IPv6, basically enough to get past a few Cisco exams, which inevitably gets forgotten about after some time of little to no use. I purchased IPv6 Fundamentals by Rick Graziani, I want to say almost a year ago. Its been sitting there haunting me for months.</p>
<p>I finally cracked it open and I can say it is incredible in getting you used to IPv6 and understanding the technologies involved. I’m about a third of the way done with the book and I hope to put some of what I’ve learned to practice in the topology above and in this post. Also, maybe helping folks learn a bit about spine leaf deployments and IPv6 in general.</p>
<p>Since its just you and me here. Lets pretend our site was assigned the 2001:db8:cafe::/48 global unicast prefix. Let me tell you, this gives us a whole bunch of IP space. I mean unimaginable amounts of IP space. This prefix will be more important as we go through the post. Please note, this design is fairly basic in nature and doesn’t use any fancy stuff like EVPN/VXLAN/LAG.</p>
<h2 id="design">Design</h2>
<p>The design you see above is using Aruba CX nodes with version 10.06.0001 running on EVE-NG. The base of the topology is a spine leaf design. In a spine leaf design, every spine connects to every leaf. Every leaf connects to every spine. Spines do not connect with each other. In some situations, leaf switches can connect together. For example, when dual connecting a host. In the case of this topology we have two spines and four leaf nodes. The Linux nodes you see below are just running Linux Slax. They will be used for some lightweight testing and verification of connectivity.</p>
<p>Lets knock out a few of the simple things. I’ll be using OSPFv3 in this example. The nodes were required to have a router ID set. In this case I stuck with spine01 having 1.1.1.1, spine02 having 1.1.1.2, and so on. For the leaf nodes I used the 10.0.0.x pattern. X being the number of the leaf.</p>
<p>The leaf to spine connections just follow a pattern, port 1 on each leaf connects to spine01 and port 2 on each leaf connects to spine02. Speaking of the leaf to spine connections, you will notice that these are point to point connections. In the IPv4 world this would usually mean we have a /30 or /31 network on the link. IPv6 has something similar, the /127 network.</p>
<p>We will use a portion of the highest network in 2001:db8:cafe::/48. Connections to spine01 will be on 2001:db8:cafe:fe::/56 and connections to spine02 will be on the 2001:db8:cafe:ff::/56 network. You will probably notice the pattern I followed in the diagram. Leaf nodes will always get the ::b address and spines will be assigned the ::a address.</p>
<p>At this point you might be thinking, wow this is wasting a lot of IP space. Remember, with IPv6 you have an incredible amount of IP space. This doesn’t mean you shouldn’t plan ahead but also don’t spend months on this. One small caveat, I’m not saying this is a great or even good IP plan for this deployment. Just going by what I’ve learned so far and putting it to use. Below you’ll see the link configurations on spine01. The output for spine02 is essentially the same.</p>
<h2 id="ospfv3-and-spine-nodes">OSPFv3 and Spine Nodes</h2>
<p><code>Spine01 Configuration</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">!
interface mgmt
     no shutdown
     ip dhcp
interface 1/1/1
     no shutdown
     description link to leaf01
     ipv6 address link-local fe80:face:cafe::1/64
     ipv6 address 2001:db8:cafe:fe01::a/127
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
interface 1/1/2
     no shutdown
     description link to leaf02
     ipv6 address link-local fe80:face:cafe::1/64
     ipv6 address 2001:db8:cafe:fe02::a/127
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
interface 1/1/3
     no shutdown
     description link to leaf03
     ipv6 address link-local fe80:face:cafe::1/64
     ipv6 address 2001:db8:cafe:fe03::a/127
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
interface 1/1/4
     no shutdown
     description link to leaf04
     ipv6 address link-local fe80:face:cafe::1/64
     ipv6 address 2001:db8:cafe:fe04::a/127
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
interface loopback 0
     ipv6 address link-local fe80:face:cafe::1/64
     ipv6 address 2001:db8:cafe:ffff::1/128
     ipv6 ospfv3 1 area 0.0.0.0
!
router ospfv3 1
     router-id 1.1.1.1
     passive-interface default
     area 0.0.0.0
!
</code></pre></div><p>A lot to unpack there right? Ill do my best to break it down below. Lets just focus on the small snippet below.</p>
<p><code>Interface Snippet</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">interface 1/1/4
     no shutdown
     description link to leaf04
     ipv6 address link-local fe80:face:cafe::1/64
     ipv6 address 2001:db8:cafe:fe04::a/127
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
!
router ospfv3 1
     router-id 1.1.1.1
     passive-interface default
     area 0.0.0.0
</code></pre></div><p>The link local address comes with every IPv6 enabled interface. Whether its Windows, Mac, or whatever. Doesn’t matter. You can leave this alone and the device will generate a link local address on its own. In our world, its better to just configure the link local address ourselves. This helps when working with routing protocols and figuring out what the source of traffic may be. You can configure the same link local address on each interface of a device. Link local addresses start with fe80, and as you can see, I’ve assigned the same throughout each interface.</p>
<p>Not much to add on the global unicast address (2001:). This is following the plan mentioned above. Note that all spine01 GUA end in ::a. “ipv6 ospfv3 1 area 0.0.0.0”, just enabling OSPF under the interface. One good thing to note, if you noticed there is “no ipv6 ospfv3 passive” under each point to point interface. By default we are setting each OSPF enabled interface to passive.</p>
<p>This is a good way of limiting the amount of chatter in a OSPF network. This will also skip some OSPF states since no DR/BDR elections occur or even need to occur on point to point links. Under the main OSPFv3 configuration; we are setting every interface to passive by default, setting router ID, and activating area 0. Bidirectional forwarding detection (BFD) is enabled under each point to point interface to help with failure detection on links.</p>
<p>I want to take a quick second and mention IP unnumbered. This does seem like a lot of IP addresses to manage, even if we are following a pattern. To my knowledge and some google searches, I don’t believe Aruba supports this feature. IP unnumbered essentially lets you borrow an IP address from an interface. For example, borrowing the loopback 0 address in our deployment and using it on all point to point links. If your network operating system supports this feature, use it! I think that’s enough for the spines, lets take a look at one of the leaf nodes. Below is leaf01, again, all other leaf nodes are essentially the same.</p>
<h2 id="ospfv3-and-leaf-nodes">OSPFv3 and Leaf Nodes</h2>
<p><code>Leaf01 Configuration</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">vlan 1,10
interface 1/1/1
     no shutdown
     description link to spine01
     ipv6 address link-local fe80:beef:cafe::1/64
     ipv6 address 2001:db8:cafe:fe01::b/127
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
interface 1/1/2
     no shutdown
     description link to spine02
     ipv6 address link-local fe80:beef:cafe::1/64
     ipv6 address 2001:db8:cafe:ff01::b/127
     ipv6 ospfv3 1 area 0.0.0.0
     no ipv6 ospfv3 passive
     ipv6 ospfv3 network point-to-point
     ipv6 ospfv3 bfd
interface 1/1/6
     no shutdown
     description link to Linux1
     no routing
     vlan access 10
interface loopback 0
     ipv6 address link-local fe80:beef:cafe::1/64
     ipv6 address 2001:db8:cafe:fd00::1/128
     ipv6 ospfv3 1 area 0.0.0.0
interface vlan 10
     ipv6 address link-local fe80:beef:cafe::1/64
     ipv6 address 2001:db8:cafe🅰️:1/64
     no ipv6 nd suppress-ra
     ipv6 ospfv3 1 area 0.0.0.0
!
router ospfv3 1
     router-id 10.0.0.1
     passive-interface default
     area 0.0.0.0
</code></pre></div><p>Looks fairly similar right? Lets just focus on the new stuff. I added VLAN 10 on leaf01, VLAN 20 on leaf02, and so on. After that I just assigned the host interface to the appropriate VLAN. Here is where things get fun. In hex you get the range of 1-15. A-F make up what we know as 10-15. Remember our whole network is 2001:db8:cafe::/48. I decided to use the next available prefix that matched the VLAN number.</p>
<p>For example if the VLAN is 10, that would give us 2001:db8:cafe🅰️:/64. If the VLAN was 20, that would give us 2001:db8:cafe:14::/64. Looking at that last IP, the 1 in 14 is in the 16s place, so that adds up to 16, and the 4 is in the 1s place. 16 + 4 = 20, or VLAN 20. Now you might be wondering, why are you using a /64. Well, the powers that be recommend all LAN networks be a /64. This helps nodes acquire addresses automatically without a DHCP server. More on that in a sec. The /64 would give you over 18,000,000,000,000,000,000 possible Interface IDs…. on one LAN… wow.</p>
<h2 id="hosts">Hosts</h2>
<p>You may have wondered, what does the “no ipv6 nd suppress-ra” command do? This is a great time to talk about hosts or end devices. Usually these systems will have static addresses for management and tracking. I left the Linux hosts as default so they could use the built in processes with IPv6 to acquire an address. Back to the /64 prefix size. We have just split the 128 bit address in half. 64 are for the prefix/subnet and what’s left are for hosts, called an interface ID in IPv6.</p>
<p>In IPv6 hosts can use a process called SLAAC (stateless address autoconfiguration). I wont go deep into details but essentially the host sends router solicitation (RS) messages and the router responds with router advertisement (RA) messages. The host uses the information in the RA message, with the prefix to determine how to go about getting an interface ID.</p>
<p>In our case the host will use EUI-64. Another new thing! This ones not so bad. Essentially the host uses its 48 bit MAC address, splits it in half to insert FFFE in the middle, and then flips the seventh bit to make it a zero or a one. Don’t worry if its over your head. Just know the host uses its MAC to build the interface ID and inserts FFFE in the middle!</p>
<p>Back to our “no ipv6 nd suppress-ra” command. From my testing it seems that Aruba CX devices wont send the RA message needed by the hosts by default. In this case, just add that command and away you go. I&rsquo;ll finish the technical stuff with a snap of Wireshark between Linux1 and leaf01</p>
<p><code>Packet capture between leaf01 and linux01</code></p>
<p><img src="/blog/images/aruba_ipv6_wireshark.png" alt="IPv6 Packets"></p>
<p><code>Packet Information</code></p>
<table>
<thead>
<tr>
<th>Packet #</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>8</td>
<td>Router Solicitation (RS)</td>
<td>Linux1 using its link local address (fe80:5200:ff:fe07:0) to reach the All-routers address (ff02::2)</td>
</tr>
<tr>
<td>9</td>
<td>Router Advertisement (RA)</td>
<td>leaf01 using its link local address (fe80:beef:cafe::1) to reach the All-nodes address (ff02::1)</td>
</tr>
</tbody>
</table>
<p>Check out the ICMPv6 options sent in the RA message. The big one to note here is the prefix information of 2001:db8:cafe🅰️:/64, the VLAN 10 prefix information on leaf01. Just a note, the RA message is also the only way a node can get a default gateway in IPv6. Whether its SLAAC or DHCPv6, the default gateway comes from the RA message.</p>
<p>What’s a good network engineering article without some routes and pings!</p>
<p><code>OSPFv3 Routes at leaf01</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">leaf01# show ipv6 ospfv3 routes | b 2001
 2001:db8:cafe🅰️:/64 (i) area:0.0.0.0
      directly attached to interface vlan10, cost 100 distance 110
 2001:db8:cafe:14::/64 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 300 distance 110
 2001:db8:cafe:14::/64 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 300 distance 110
 2001:db8:cafe:1e::/64 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 300 distance 110
 2001:db8:cafe:1e::/64 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 300 distance 110
 2001:db8:cafe:28::/64 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 300 distance 110
 2001:db8:cafe:28::/64 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 300 distance 110
 2001:db8:cafe:fd00::2/128 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
 2001:db8:cafe:fd00::2/128 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
 2001:db8:cafe:fd00::3/128 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
 2001:db8:cafe:fd00::3/128 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
 2001:db8:cafe:fd00::4/128 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
 2001:db8:cafe:fd00::4/128 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
 2001:db8:cafe:fe01::a/127 (i) area:0.0.0.0
      directly attached to interface 1/1/1, cost 100 distance 110
 2001:db8:cafe:fe02::a/127 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
 2001:db8:cafe:fe03::a/127 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
 2001:db8:cafe:fe04::a/127 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 200 distance 110
 2001:db8:cafe:ff01::a/127 (i) area:0.0.0.0
      directly attached to interface 1/1/2, cost 100 distance 110
 2001:db8:cafe:ff02::a/127 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
 2001:db8:cafe:ff03::a/127 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
 2001:db8:cafe:ff04::a/127 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 200 distance 110
 2001:db8:cafe:ffff::1/128 (i) area:0.0.0.0
      via fe80:face:cafe::1 interface 1/1/1, cost 100 distance 110
 2001:db8:cafe:ffff::2/128 (i) area:0.0.0.0
      via fe80:face:cafe::2 interface 1/1/2, cost 100 distance 110
</code></pre></div><p><code>Trace from leaf01 to VLAN 40 at leaf04</code></p>
<p><img src="/blog/images/ping6_linux1_linux4.png" alt="Pings"></p>
<h2 id="outro-and-links">Outro and Links</h2>
<p>Thank you so much for reading this far! I am just getting my bearings with IPv6 but it really is great. Maybe as I work through the book I&rsquo;ll add some border leaf nodes and get some NAT64 going! Check out the links below if curious about learning more on IPv6 or data center networking. Too many RFCs to list but you can easily google them. For example RFC 6164, “Using 127-Bit IPv6 Prefixes on Inter-Router Links”.</p>
<ul>
<li><a href="https://www.amazon.com/Cloud-Native-Data-Center-Networking/dp/1492045608">Cloud Native Data Center Networking: Architecture, Protocols, and Tools - I cant find the free link!</a></li>
<li><a href="https://www.amazon.com/IPv6-Fundamentals-Straightforward-Approach-Understanding/dp/1587144778/ref=sr_1_2?dchild=1&amp;keywords=ipv6+fundamentals&amp;qid=1616115794&amp;sr=8-2">IPv6 Fundamentals: A Straightforward Approach to Understanding IPv6 2nd Edition</a></li>
<li>FYI, these are not sponsored links at all. I earn nothing if you buy or don’t buy a product.</li>
<li>Follow up post: <a href="https://juliopdx.com/2021/03/29/aruba-spine-leaf-deployment-with-ospfv3-and-link-local-addresses/">Using only link-local addresses between routers</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>My Journey to Completing the David Goggins 4x4x48 Challenge</title>
            <link>https://juliopdx.github.io/2021/03/08/my-journey-to-completing-the-david-goggins-4x4x48-challenge/</link>
            <pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate>
            
            <guid>https://juliopdx.github.io/2021/03/08/my-journey-to-completing-the-david-goggins-4x4x48-challenge/</guid>
            <description>Introduction Hello and thank you for tuning in. Just for clarity, the 4x4x48 challenge was created by David Goggins. The challenge requires participants to run 4 miles every 4 hours for 48 hours. Participants are allowed to substitute running with walking or general exercise. The main goal is to get people moving as well as donate to charity!
The next thought may be why the hell would someone want to run 48 miles on a perfectly nice weekend?</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello and thank you for tuning in. Just for clarity, the 4x4x48 challenge was created by David Goggins. The challenge requires participants to run 4 miles every 4 hours for 48 hours. Participants are allowed to substitute running with walking or general exercise. The main goal is to get people moving as well as donate to charity!</p>
<p>The next thought may be why the hell would someone want to run 48 miles on a perfectly nice weekend? Everyone will have their own reasons, heck for some this may just be a training run, shout-out to all the ultra runners out there (I am not one). I had a few reasons for attempting this challenge. Most of them are pretty selfish of me to be honest. This was a physical test for a distance I’ve never even come close to reaching. Even greater than the physical challenge was the mental challenge I would eventually be faced with. This impacted me mentally way more than physically when it was all done with.</p>
<p>I think this is a good spot to give you all a bit of a background on my running history. I have an okay athletic background. Never been the fastest, strongest, or lowest weight. Heck before this challenge I was sitting right at 235 lbs. My time in the military only required running 1.5 miles under 13 minutes or so to get a decent physical score. I’ve competed with teams on endurance races, but even then I was responsible for maybe one or two legs of the eventual 70 plus miles. Where each leg I may be responsible for 3-5 miles. For this event I wasn’t just the leg, I was the team… yikes!</p>
<p>Since my time in the military I still run 3-4 times a week for about 3-5 miles each run. Last year I had the idea of training for a marathon. It would be my first and I thought it would be a sweet goal. I was up to 16 miles in one session, which I thought was great. Inevitably, the current pandemic we are all going through put a stop to all races. I figured I’d keep training and eventually I could get one marathon under my belt. Well we are all human and around August/September of last year, I dealt with a nagging upper calf injury that wouldn’t go away. I did some PT and took a lot of time off (months). Injuries aren’t new to me, hell I’ve torn the ACL in my left knee 3 times! At least that injury puts you all the way down for some time.</p>
<h2 id="run-preparation">Run Preparation</h2>
<p>That was a really long winded background but its my blog so its all good! Now for how I prepared for this challenge. Full disclosure, I am no running expert and this is definitely not the go to plan or even a good plan. Its just what worked for me. I continued running 3-4 times a week for about 3-5 miles after I recovered from the calf injury. I also added weight training using those fancy adjustable dumbbells, yay for home gyms! I eventually started running right after doing a leg day workout. Trying to trick my mind into dealing with the soreness I would face during this challenge. Oh boy I couldn’t be more wrong.</p>
<h2 id="running-technique">Running Technique</h2>
<p>The running technique I use is pretty damn simple. I run for a few minutes… then walk for 30 seconds. This technique was developed or popularized by Jeff Galloway. I heard about Jeff from a fellow co worker and picked up his book to train for the marathon, “Marathon, You Can Do It!”. The thought behind this technique is that you run for a certain amount of time and then walk. You basically do this in intervals and repeat. The small walk breaks in between running lowers the muscle breakdown and soreness experienced from constant running. Runners have even accomplished personal bests using this technique. Some folks may put you down because you aren’t constantly running, but take my advice and tell them to FUCK right off.</p>
<h2 id="nutrition">Nutrition</h2>
<p>Sorry for getting so spicy there at the end. While running the challenge, when I hit mile 30+ and other weekend runners are doing their thing and passing you, don’t get down. Just tell yourself “IM ON MILE FUCKING 30!”. Just a bit on nutrition, again I’m no expert. I basically searched the internets, what are the best fruits to eat after runs? I saw bananas (cramps) / oranges (muscle recovery). Besides the usual protein source to fuel muscles and a whole lot of carbs. I had some chicken and rice as my main meals. Pictured below is my race set up (thanks to my lovely wife).</p>
<p><img src="/blog/images/run_nutrition.jpg" alt="Food"></p>
<h2 id="pre-race">Pre Race</h2>
<p>So now its the night before the race. I tried for a while to place it in the back of my mind. Thinking about that many miles in general makes me nervous and boy was I nervous the night before. My advice would be to lay out all your clothes, gear, food, and chargers in one room or general area. It makes transitioning from relaxing to running so much easier. In my case I left all chargers connected so I just dropped off running watch or earbuds on their charger when a leg was done. Don’t forget this! My running light ran out of juice during one run and damn it was dark!</p>
<p>I did some simple math and figured we would all be running 12 total legs to complete the challenge. Initially I wanted to break down this write up leg by leg and honestly I think its better if I group them into thirds. Since the pain and tiredness you experience is similar between them.</p>
<h2 id="legs-1-4">Legs 1-4</h2>
<p>Some of the fastest legs here for obvious reason haha. I mentioned before I reached 16 miles in one running session. In my mind I knew I could at the very least make it to mile 16, which would take me to the end of leg 4. These runs were overall pretty fun and the muscle soreness and fatigue was low.</p>
<p><img src="/blog/images/legs_1_4.png" alt="1-4"></p>
<h2 id="midnight-runs">Midnight Runs</h2>
<p>I have to mention this. Being a two day event, you will be running in the dark. I would recommend getting a reflective vest and a light for the front and back. Stay safe out there folks and protect yourselves. The night runs for me were truly special. The world is so silent but loud at the same time. You hear everything; the wind moving grass, stop signs shaking, small critters, the sound of your breath, or the college kid puking his guts out over the porch. I’m not hating, enjoy yourself young man!</p>
<h2 id="legs-5-8">Legs 5-8</h2>
<p>These legs were honestly a total surprise to me. It would be mileage I have never reached before and that might be what fueled me during these runs. My overall times were pretty good. I maintained a good pace and muscle soreness around the quad, hip, and calf areas just started. Remember when I said “IM ON MILE FUCKING 30!”</p>
<p><img src="/blog/images/legs_5_8.png" alt="5-8"></p>
<h2 id="legs-9-12-go-get-it">Legs 9-12 &ldquo;Go get it&rdquo;</h2>
<p>I wont lie to anyone. Unless you are some experienced distance runner, these legs will hurt! I say that for a good reason. No one is making us do this. You can stop at anytime. Whatever the reason is that you chose to do this, I’m so happy and proud of you. It’ll hurt to even think of leaving that warm comfy bed at 4AM. Just know that you made it this far and you should be so proud. “One more to go!! Go get it!!” – John Spiegel</p>
<p><img src="/blog/images/legs_9_12.png" alt="9-12"></p>
<p>Some of you may have wondered, if you have to run 4 miles every four hours, why the hell is this dude running 4.4? Again, for selfish reasons. I’ve never gone for this many miles. This got me thinking, “if I can make it that far, how much will I need to run to hit 52.4”. The equivalent of TWO marathons. From never running one to running two in 48 hours. I thought that would be incredible and pretty damn special.</p>
<h2 id="in-between-time">In Between Time</h2>
<p>What do you do in between each leg? I developed a pretty normal routine. I ate half a banana after each leg and some orange slices. I would then hydrate with plain water and get a meal in at normal times of the day. I stretched and foam rolled after each and every run, no exceptions. Even if you have to stretch in bed at 1AM… do it! Besides that I just played some video games and read messages from awesome supporters.</p>
<h2 id="support">Support</h2>
<p>When embarking on great challenges, having a support team or person is critical. Thank you to everyone who like, comment, and subscribed… wait a minute this isn’t YouTube. Seriously, thank you to everyone that supported me and left a positive message. Thank you to all the support teams out there, y’all rock! Last but definitely not least. Big thanks to my wife Amanda, without her support I don’t know what I would be doing. Definitely not running 52 miles…</p>
<h2 id="you-can-do-it">You Can Do It</h2>
<p>This experience has showed me if you put your mind to it, you really can do anything. Cliché I know. Take me as a small example. After the third ACL tear, I could’ve given up on all athletic hopes and dreams. Maybe now I can claim the title of being the greatest to ever run 52 miles with a twitter handle of Julio_PDX…</p>
<p><img src="/blog/images/night_run.jpg" alt="Night Run"></p>
]]></content>
        </item>
        
        <item>
            <title>Network Validation With Nornir &amp; Napalm</title>
            <link>https://juliopdx.github.io/2021/02/27/network-validation-with-nornir-napalm/</link>
            <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
            
            <guid>https://juliopdx.github.io/2021/02/27/network-validation-with-nornir-napalm/</guid>
            <description>Intro I wanted to get my feet wet with Nornir/NAPALM and Python network automation in general. One simple goal to start with in network automation is validating configurations or deploying “show commands” and returning some kind of useful information. I wanted to start with something very simple, as easy wins make me want to keep progressing. In this post I will break down how I validate SNMP information on network devices using Nornir and NAPALM.</description>
            <content type="html"><![CDATA[<p><img src="/blog/images/nornir_logo_02.jpg" alt="Nornir Image"></p>
<h2 id="intro">Intro</h2>
<p>I wanted to get my feet wet with <a href="https://nornir.readthedocs.io/en/latest/">Nornir</a>/<a href="https://napalm.readthedocs.io/en/latest/">NAPALM</a> and Python network automation in general. One simple goal to start with in network automation is validating configurations or deploying “show commands” and returning some kind of useful information. I wanted to start with something very simple, as easy wins make me want to keep progressing. In this post I will break down how I validate SNMP information on network devices using Nornir and NAPALM.</p>
<p>I think its worth knowing a bit of background to set the stage for future network engineers that are curious about diving into python for network automation. For starters, you can do it! I started my career with zero knowledge about python or programming in general. My initial and current automation efforts revolve mostly around using <a href="https://docs.ansible.com/ansible/latest/network/index.html">Ansible</a>. I think both tools are great and they each have their place in this space. In the bottom of this post I’ll include some links on resources I’ve used.</p>
<p>I wont go too deep into explaining Nornir and NAPALM but I’ll do my best. Nornir is a framework in which, it can provide a foundation for plugins or tools to be constructed around it. Think of Ansible but pure Python. NAPALM acts almost like a translator for multivendor environments. For example, if our goal is to get interface information or SNMP information from a device, we don’t care what commands are executed. We just need the data returned to use in a constructed manner.</p>
<p>NAPALM does this in a concept it calls “getters”. Getters are basically functions in NAPALM that interact with networking devices and return structured information. For a list of all supported vendors and getters, please see <a href="https://napalm.readthedocs.io/en/latest/support/">here</a>.</p>
<p><code>Current Structure</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>venv<span style="color:#f92672">)</span> juliopdx@juliopdx-virtual-2004:~/git/nornir_snmp_validation$ tree -I venv
 .
 ├── config.yaml
 ├── inventory
 │   ├── defaults.yaml
 │   ├── groups.yaml
 │   └── hosts.yaml
 ├── nornir.log
 ├── README.md
 ├── requirements.txt
 ├── snmp_validate.py
 └── validate
     └── cisco.yaml
 <span style="color:#ae81ff">2</span> directories, <span style="color:#ae81ff">9</span> files
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Creating python environment</span>
python3 -m venv venv

<span style="color:#75715e"># Activating virtual environment</span>
source venv/bin/activate

<span style="color:#75715e"># Clone git repo</span>
git clone https://github.com/JulioPDX/nornir_snmp_validation.git
cd nornir_snmp_validation/

<span style="color:#75715e"># Install requirements</span>
pip install -r requirements.txt
</code></pre></div><p>Nornir was recently updated to split some of the functionality from Nornir core and the additional plugins. I just went ahead and installed pretty much all of the third party plugins at once. <a href="https://nornir.tech/nornir/plugins/">Here is a link to those plugins</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"> nornir<span style="color:#f92672">==</span>3.0.0
 nornir-ansible<span style="color:#f92672">==</span>2020.9.26
 nornir-jinja2<span style="color:#f92672">==</span>0.1.1
 nornir-napalm<span style="color:#f92672">==</span>0.1.1
 nornir-netbox<span style="color:#f92672">==</span>0.2.0
 nornir-netmiko<span style="color:#f92672">==</span>0.1.1
 nornir-pyez<span style="color:#f92672">==</span>0.0.10
 nornir-scrapli<span style="color:#f92672">==</span>2021.1.30
 nornir-utils<span style="color:#f92672">==</span>0.1.1
</code></pre></div><p>lets take a look at the config.yaml file. If you are coming from an Ansible background, just think about this as the ansible.cfg file. This allows you to set the inventory plugin, runner (# of ssh sessions and serial vs threaded), and locations for certain files that we’ll talk about in a bit.</p>
<p><code>config.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
 <span style="color:#f92672">inventory</span>:
   <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">SimpleInventory</span>
   <span style="color:#f92672">options</span>:
     <span style="color:#f92672">host_file</span>: <span style="color:#e6db74">&#34;inventory/hosts.yaml&#34;</span>
     <span style="color:#f92672">group_file</span>: <span style="color:#e6db74">&#34;inventory/groups.yaml&#34;</span>
     <span style="color:#f92672">defaults_file</span>: <span style="color:#e6db74">&#34;inventory/defaults.yaml&#34;</span>
 <span style="color:#f92672">runner</span>:
   <span style="color:#f92672">plugin</span>: <span style="color:#ae81ff">threaded</span>
   <span style="color:#f92672">options</span>:
     <span style="color:#f92672">num_workers</span>: <span style="color:#ae81ff">10</span>
</code></pre></div><p>Now lets go into our inventory folder. You will notice that we have three files; hosts.yaml (for host data), group.yaml (group data), and defaults.yaml (defaults/global data). I found that Nornir is really flexible on where you can store information. I’ll show you what made sense to me.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
 <span style="color:#f92672">port</span>: <span style="color:#ae81ff">22</span>
 <span style="color:#f92672">username</span>: <span style="color:#ae81ff">cisco</span>
 <span style="color:#f92672">password</span>: <span style="color:#ae81ff">cisco</span>
 <span style="color:#f92672">platform</span>: <span style="color:#ae81ff">ios</span>
<span style="color:#75715e"># Since I am using only Cisco devices in this lab, I just set the</span>
<span style="color:#75715e"># login information at the defaults level.</span>
<span style="color:#75715e"># In multivendor deployments, you would probably break this out</span>
<span style="color:#75715e"># into the groups.yaml file or under each hosts...</span>
</code></pre></div><p>At the moment I didn’t do much of anything with the goups.yaml file. In my testing it seems that if a group is called out in the hosts.yaml file, it must exist in the groups.yaml file.</p>
<p><code>groups.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#f92672">cisco</span>:
   <span style="color:#f92672">data</span>:
 <span style="color:#f92672">switches</span>:
   <span style="color:#f92672">data</span>:
 <span style="color:#f92672">routers</span>:
   <span style="color:#f92672">data</span>:
</code></pre></div><p>I tried to keep the host.yaml file as simple as possible. I created some fake data under each host to signify what site they belong to. This was mainly as an example from the official documentation. I assigned different hosts to different groups depending on if they were switches or routers, and what vendor. Oh, going back to the group variables. If different systems had different connection parameters, you could put that under the groups.yaml file and just assign the host to that group.</p>
<p><code>hosts.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#f92672">NY-SW-01</span>:
  <span style="color:#f92672">hostname</span>: <span style="color:#ae81ff">192.168.10.37</span>
  <span style="color:#f92672">groups</span>:
    - <span style="color:#ae81ff">cisco</span>
    - <span style="color:#ae81ff">switches</span>
  <span style="color:#f92672">data</span>:
    <span style="color:#f92672">site</span>: <span style="color:#ae81ff">NY</span>
<span style="color:#f92672">NE-RTR-01</span>:
  <span style="color:#f92672">hostname</span>: <span style="color:#ae81ff">192.168.10.38</span>
  <span style="color:#f92672">groups</span>:
    - <span style="color:#ae81ff">cisco</span>
    - <span style="color:#ae81ff">routers</span>
  <span style="color:#f92672">data</span>:
    <span style="color:#f92672">site</span>: <span style="color:#ae81ff">NE</span>
<span style="color:#f92672">OR-SW-01</span>:
  <span style="color:#f92672">hostname</span>: <span style="color:#ae81ff">192.168.10.36</span>
  <span style="color:#f92672">groups</span>:
    - <span style="color:#ae81ff">cisco</span>
    - <span style="color:#ae81ff">switches</span>
  <span style="color:#f92672">data</span>:
    <span style="color:#f92672">site</span>: <span style="color:#ae81ff">OR</span>
</code></pre></div><p>I’m going to side step a bit here and get into NAPALM. NAPALM has a lot of great plugin tasks that work with Nornir but the two that I used in this test were napalm_get and napalm_validate. The reason I used the get task? I needed to see how the information was returned by NAPALM so that I could then build the source file to validate against. A seasoned professional could probably just go straight to the docs, but I needed a bit more. The following NAPALM docs helped in creating this. <a href="https://napalm.readthedocs.io/en/develop/validate/index.html">Napalm Validate</a>.</p>
<p>Below is a view of the /validate/cisco.yaml file. This was created from the link mentioned above and running the napalm_get task. Notice that the cisco.yaml file lists the name of the getter at the top or root of the file. You could lists multiple getters to validate multiple pieces of information, as long as its supported with your device.</p>
<p><code>/validate/cisco.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
- <span style="color:#f92672">get_snmp_information</span>:
    <span style="color:#f92672">community</span>:
      <span style="color:#f92672">myreadonly</span>:
        <span style="color:#f92672">acl</span>: <span style="color:#66d9ef">N</span><span style="color:#ae81ff">/A</span>
        <span style="color:#f92672">mode</span>: <span style="color:#ae81ff">ro</span>
      <span style="color:#f92672">mysecurestring</span>:
        <span style="color:#f92672">acl</span>: <span style="color:#66d9ef">N</span><span style="color:#ae81ff">/A</span>
        <span style="color:#f92672">mode</span>: <span style="color:#ae81ff">rw</span>
    <span style="color:#f92672">contact</span>: <span style="color:#ae81ff">JulioPDX</span>
    <span style="color:#f92672">location</span>: <span style="color:#ae81ff">mylocation</span>
</code></pre></div><p>Here is a snippet from each devices SNMP configuration. Looking at the validate file above and the snippets, can you guess which device will fail?</p>
<p><code>SNMP Configurations</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">NY-SW-01<span style="color:#f92672">(</span>config<span style="color:#f92672">)</span><span style="color:#75715e">#do show run | inc snmp</span>
 snmp-server community mysecurestring RW
 snmp-server community myreadonly RO
 snmp-server location mylocation
 snmp-server contact JulioPDX

NE-RTR-01<span style="color:#f92672">(</span>config<span style="color:#f92672">)</span><span style="color:#75715e">#do show run | inc snmp</span>
 snmp-server community public RO
 snmp-server community private RW
 snmp-server location mylocation
 snmp-server contact JulioPDX

OR-SW-01<span style="color:#f92672">(</span>config<span style="color:#f92672">)</span><span style="color:#75715e">#do show run | inc snmp</span>
 snmp-server community myreadonly RO
 snmp-server community mysecurestring RW
 snmp-server location mylocation
 snmp-server contact JulioPDX
</code></pre></div><p><code>snmp_validate.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># Import required modules</span>
<span style="color:#f92672">from</span> nornir <span style="color:#f92672">import</span> InitNornir
<span style="color:#f92672">from</span> nornir_utils.plugins.functions <span style="color:#f92672">import</span> print_result
<span style="color:#f92672">from</span> nornir_napalm.plugins.tasks <span style="color:#f92672">import</span> napalm_get, napalm_validate

<span style="color:#75715e"># Initializing Nornir</span>
nr <span style="color:#f92672">=</span> InitNornir(config_file<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;config.yaml&#34;</span>)

get_snmp <span style="color:#f92672">=</span> nr<span style="color:#f92672">.</span>run(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;GATHERING SNMP&#34;</span>, task<span style="color:#f92672">=</span>napalm_get, getters<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;get_snmp_information&#34;</span>])

print_result(get_snmp)

validate <span style="color:#f92672">=</span> nr<span style="color:#f92672">.</span>run(name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;VALIDATE SNMP&#34;</span>, task<span style="color:#f92672">=</span>napalm_validate, src<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;./validate/cisco.yaml&#34;</span>)

print_result(validate)
</code></pre></div><p>Here is the output of the script, main parts to look at are towards the bottom when the snmp validations are printed to the screen.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>venv<span style="color:#f92672">)</span> juliopdx@juliopdx-virtual-2004:~/git/nornir_snmp_validation$ python snmp_validate.py
 GATHERING SNMP**
 NE-RTR-01 ** changed : False *
 vvvv GATHERING SNMP ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO
 <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;get_snmp_information&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;chassis_id&#39;</span>: <span style="color:#e6db74">&#39;&#39;</span>,
                         <span style="color:#e6db74">&#39;community&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;private&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;acl&#39;</span>: <span style="color:#e6db74">&#39;N/A&#39;</span>,
                                                     <span style="color:#e6db74">&#39;mode&#39;</span>: <span style="color:#e6db74">&#39;rw&#39;</span><span style="color:#f92672">}</span>,
                                        <span style="color:#e6db74">&#39;public&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;acl&#39;</span>: <span style="color:#e6db74">&#39;N/A&#39;</span>,
                                                    <span style="color:#e6db74">&#39;mode&#39;</span>: <span style="color:#e6db74">&#39;ro&#39;</span><span style="color:#f92672">}}</span>,
                         <span style="color:#e6db74">&#39;contact&#39;</span>: <span style="color:#e6db74">&#39;JulioPDX&#39;</span>,
                         <span style="color:#e6db74">&#39;location&#39;</span>: <span style="color:#e6db74">&#39;mylocation&#39;</span><span style="color:#f92672">}}</span>
 ^^^^ END GATHERING SNMP ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 NY-SW-01 ** changed : False
 vvvv GATHERING SNMP ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO
 <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;get_snmp_information&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;chassis_id&#39;</span>: <span style="color:#e6db74">&#39;9NA76XNH9Z8&#39;</span>,
                         <span style="color:#e6db74">&#39;community&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;myreadonly&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;acl&#39;</span>: <span style="color:#e6db74">&#39;N/A&#39;</span>,
                                                        <span style="color:#e6db74">&#39;mode&#39;</span>: <span style="color:#e6db74">&#39;ro&#39;</span><span style="color:#f92672">}</span>,
                                        <span style="color:#e6db74">&#39;mysecurestring&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;acl&#39;</span>: <span style="color:#e6db74">&#39;N/A&#39;</span>,
                                                            <span style="color:#e6db74">&#39;mode&#39;</span>: <span style="color:#e6db74">&#39;rw&#39;</span><span style="color:#f92672">}}</span>,
                         <span style="color:#e6db74">&#39;contact&#39;</span>: <span style="color:#e6db74">&#39;JulioPDX&#39;</span>,
                         <span style="color:#e6db74">&#39;location&#39;</span>: <span style="color:#e6db74">&#39;mylocation&#39;</span><span style="color:#f92672">}}</span>
 ^^^^ END GATHERING SNMP ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 OR-SW-01 ** changed : False
 vvvv GATHERING SNMP ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO
 <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;get_snmp_information&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;chassis_id&#39;</span>: <span style="color:#e6db74">&#39;9QA913OVFJS&#39;</span>,
                         <span style="color:#e6db74">&#39;community&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;myreadonly&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;acl&#39;</span>: <span style="color:#e6db74">&#39;N/A&#39;</span>,
                                                        <span style="color:#e6db74">&#39;mode&#39;</span>: <span style="color:#e6db74">&#39;ro&#39;</span><span style="color:#f92672">}</span>,
                                        <span style="color:#e6db74">&#39;mysecurestring&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;acl&#39;</span>: <span style="color:#e6db74">&#39;N/A&#39;</span>,
                                                            <span style="color:#e6db74">&#39;mode&#39;</span>: <span style="color:#e6db74">&#39;rw&#39;</span><span style="color:#f92672">}}</span>,
                         <span style="color:#e6db74">&#39;contact&#39;</span>: <span style="color:#e6db74">&#39;JulioPDX&#39;</span>,
                         <span style="color:#e6db74">&#39;location&#39;</span>: <span style="color:#e6db74">&#39;mylocation&#39;</span><span style="color:#f92672">}}</span>
 ^^^^ END GATHERING SNMP ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 VALIDATE SNMP***
 NE-RTR-01 ** changed : False *
 vvvv VALIDATE SNMP ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO
 <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: False,
 <span style="color:#e6db74">&#39;get_snmp_information&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: False,
                         <span style="color:#e6db74">&#39;extra&#39;</span>: <span style="color:#f92672">[]</span>,
                         <span style="color:#e6db74">&#39;missing&#39;</span>: <span style="color:#f92672">[]</span>,
                         <span style="color:#e6db74">&#39;present&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;community&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: False,
                                                     <span style="color:#e6db74">&#39;diff&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: False,
                                                               <span style="color:#e6db74">&#39;extra&#39;</span>: <span style="color:#f92672">[]</span>,
                                                               <span style="color:#e6db74">&#39;missing&#39;</span>: <span style="color:#f92672">[</span> <span style="color:#e6db74">&#39;myreadonly&#39;</span>,
                                                                            <span style="color:#e6db74">&#39;mysecurestring&#39;</span><span style="color:#f92672">]</span>,
                                                               <span style="color:#e6db74">&#39;present&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#f92672">}}</span>,
                                                     <span style="color:#e6db74">&#39;nested&#39;</span>: True<span style="color:#f92672">}</span>,
                                      <span style="color:#e6db74">&#39;contact&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: True,
                                                   <span style="color:#e6db74">&#39;nested&#39;</span>: False<span style="color:#f92672">}</span>,
                                      <span style="color:#e6db74">&#39;location&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: True,
                                                    <span style="color:#e6db74">&#39;nested&#39;</span>: False<span style="color:#f92672">}}}</span>,
 <span style="color:#e6db74">&#39;skipped&#39;</span>: <span style="color:#f92672">[]}</span>
 ^^^^ END VALIDATE SNMP ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 NY-SW-01 ** changed : False
 vvvv VALIDATE SNMP ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO
 <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: True,
 <span style="color:#e6db74">&#39;get_snmp_information&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: True,
                         <span style="color:#e6db74">&#39;extra&#39;</span>: <span style="color:#f92672">[]</span>,
                         <span style="color:#e6db74">&#39;missing&#39;</span>: <span style="color:#f92672">[]</span>,
                         <span style="color:#e6db74">&#39;present&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;community&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: True,
                                                     <span style="color:#e6db74">&#39;nested&#39;</span>: True<span style="color:#f92672">}</span>,
                                      <span style="color:#e6db74">&#39;contact&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: True,
                                                   <span style="color:#e6db74">&#39;nested&#39;</span>: False<span style="color:#f92672">}</span>,
                                      <span style="color:#e6db74">&#39;location&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: True,
                                                    <span style="color:#e6db74">&#39;nested&#39;</span>: False<span style="color:#f92672">}}}</span>,
 <span style="color:#e6db74">&#39;skipped&#39;</span>: <span style="color:#f92672">[]}</span>
 ^^^^ END VALIDATE SNMP ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 OR-SW-01 ** changed : False
 vvvv VALIDATE SNMP ** changed : False vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv INFO
 <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: True,
 <span style="color:#e6db74">&#39;get_snmp_information&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: True,
                         <span style="color:#e6db74">&#39;extra&#39;</span>: <span style="color:#f92672">[]</span>,
                         <span style="color:#e6db74">&#39;missing&#39;</span>: <span style="color:#f92672">[]</span>,
                         <span style="color:#e6db74">&#39;present&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;community&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: True,
                                                     <span style="color:#e6db74">&#39;nested&#39;</span>: True<span style="color:#f92672">}</span>,
                                      <span style="color:#e6db74">&#39;contact&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: True,
                                                   <span style="color:#e6db74">&#39;nested&#39;</span>: False<span style="color:#f92672">}</span>,
                                      <span style="color:#e6db74">&#39;location&#39;</span>: <span style="color:#f92672">{</span> <span style="color:#e6db74">&#39;complies&#39;</span>: True,
                                                    <span style="color:#e6db74">&#39;nested&#39;</span>: False<span style="color:#f92672">}}}</span>,
 <span style="color:#e6db74">&#39;skipped&#39;</span>: <span style="color:#f92672">[]}</span>
 ^^^^ END VALIDATE SNMP ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 <span style="color:#f92672">(</span>venv<span style="color:#f92672">)</span> juliopdx@juliopdx-virtual-2004:~/git/nornir_snmp_validation$
</code></pre></div><p>Did you catch which one failed? If you guessed NE-RTR-01 earlier you would be correct. If you look at the output for the NE router, there is a key for “complies” and it is set to False. So now we know one device in our three device environment did not pass our SNMP validation check. This could then be tied to kick off another task to fix SNMP, report to monitoring, or some other workflow. All up to the imagination.</p>
<h2 id="outro-and-links">Outro and Links</h2>
<p>I hope this post has shown you how NAPALM and Nornir can be leveraged to validate device configurations and dive into a bit of network automation with Python. Not too bad right? Below you’ll find some links to resources I have used and a link to the git repo. There really are so many great resources in this space for network engineers. I cant possibly list them all. Thank you for reading this far, it is much appreciated! Stay safe out there.</p>
<ul>
<li><a href="https://github.com/JulioPDX/nornir_snmp_validation">Git Repository</a></li>
<li><a href="https://nostarch.com/pythoncrashcourse2e">Python Crash Course 2nd Edition</a></li>
<li><a href="https://www.packtpub.com/product/mastering-python-networking-third-edition/9781839214677">Mastering Python Networking</a></li>
<li><a href="https://www.youtube.com/playlist?list=PLKZjLeG8AwtES8apo6gonH4XmN_9xIo8W">Chuck Black 52 Weeks of Python</a></li>
<li><a href="https://github.com/networktocode/awesome-network-automation">NTC Awesome List</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Creating List of IP Addresses With Ansible Filter Plugin</title>
            <link>https://juliopdx.github.io/2021/02/02/creating-list-of-ip-addresses-with-ansible-filter-plugin/</link>
            <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
            
            <guid>https://juliopdx.github.io/2021/02/02/creating-list-of-ip-addresses-with-ansible-filter-plugin/</guid>
            <description>Intro I recently had a use case where I needed a list of IP addresses from a prefix. My first step was to go through Ansible documentation on current filters to see if something would match my need. Long story short, there wasn’t. At least, nothing I could find which honestly is probably a huge possibility, and in that case this post is pointless. Ansible does have IP address filters but I noticed most all of the examples assume you already have a list of IP addresses to pass to the filters.</description>
            <content type="html"><![CDATA[<p><img src="/blog/images/router_pool_large.png" alt="Router Image"></p>
<h2 id="intro">Intro</h2>
<p>I recently had a use case where I needed a list of IP addresses from a prefix. My first step was to go through Ansible documentation on current filters to see if something would match my need. Long story short, there wasn’t. At least, nothing I could find which honestly is probably a huge possibility, and in that case this post is pointless. Ansible does have IP address filters but I noticed most all of the examples assume you already have a list of IP addresses to pass to the filters.</p>
<p>I should probably explain what a filter does just in case the reader isn’t aware. Filters allow you to transform data from something to something else. The simplest example being, turn this lower case string to upper case. See example below.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Filter Test</span>
  <span style="color:#f92672">connection</span>: <span style="color:#ae81ff">local</span>
  <span style="color:#f92672">hosts</span>: <span style="color:#ae81ff">localhost</span>
  <span style="color:#f92672">gather_facts</span>: <span style="color:#66d9ef">no</span>
  <span style="color:#f92672">vars</span>:
    <span style="color:#f92672">my_variable</span>: <span style="color:#ae81ff">mylowercasestring</span>

  <span style="color:#f92672">tasks</span>:
    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Turning lower case string to UPPER CASE</span>
      <span style="color:#f92672">debug</span>:
        <span style="color:#f92672">msg</span>: <span style="color:#e6db74">&#34;{{ my_variable | upper }}&#34;</span>

...
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">PLAY <span style="color:#f92672">[</span>Filter Test<span style="color:#f92672">]</span>
 TASK <span style="color:#f92672">[</span>Turning lower <span style="color:#66d9ef">case</span> string to UPPER CASE<span style="color:#f92672">]</span>
 ok: <span style="color:#f92672">[</span>localhost<span style="color:#f92672">]</span> <span style="color:#f92672">=</span>&gt; <span style="color:#f92672">{</span>
     <span style="color:#e6db74">&#34;msg&#34;</span>: <span style="color:#e6db74">&#34;MYLOWERCASESTRING&#34;</span>
 <span style="color:#f92672">}</span>
</code></pre></div><p>As you can see, filters are pretty neat ways to transform data. So there I was trying to create a list of IP addresses from a prefix, with no end in sight, and Google-fu failing me. I’m sure there is some whacky ways to make it happen, like a jinja template and reading a file or using some kind of range/with sequence option. In the end I came up with the following python script. This can be placed in the /filter_plugins directory where your playbook is stored.</p>
<p><code>ip_list.py</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/python</span>

<span style="color:#f92672">from</span> netaddr <span style="color:#f92672">import</span> IPNetwork

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">ip_stuff</span>(prefix):
    ips <span style="color:#f92672">=</span> []

    <span style="color:#66d9ef">for</span> ip <span style="color:#f92672">in</span> IPNetwork(prefix):
        ips<span style="color:#f92672">.</span>append(str(ip))
    <span style="color:#66d9ef">return</span> ips

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FilterModule</span>(object):
    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">filters</span>(self):
        <span style="color:#66d9ef">return</span> {<span style="color:#e6db74">&#39;ip_list&#39;</span>: ip_stuff}
</code></pre></div><p>Breaking down the code, we first import one library, I know some folks aren’t a fan of this on filters but oh well. Then we create an empty list called ips, we then trigger a for loop to each individual entry under the prefix that will be passed in. Each entry will be added to the ips list. After that is all done we return the final list. Shout out to the oddbit blog for giving me a place to start on creating this filter.</p>
<p><code>ip_list_test.yaml</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">IP List Test</span>
  <span style="color:#f92672">connection</span>: <span style="color:#ae81ff">local</span>
  <span style="color:#f92672">hosts</span>: <span style="color:#ae81ff">localhost</span>
  <span style="color:#f92672">gather_facts</span>: <span style="color:#66d9ef">no</span>
  <span style="color:#f92672">vars</span>:
    <span style="color:#f92672">my_prefix</span>: <span style="color:#ae81ff">10.10.10.0</span><span style="color:#ae81ff">/29</span>

  <span style="color:#f92672">tasks</span>:
    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setting a fact for my list of IP addresses</span>
      <span style="color:#f92672">set_fact</span>:
        <span style="color:#f92672">my_ip_addresses</span>: <span style="color:#e6db74">&#34;{{ my_prefix | ip_list }}&#34;</span>

    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Print list of IP addresses</span>
      <span style="color:#f92672">debug</span>:
        <span style="color:#f92672">msg</span>: <span style="color:#e6db74">&#34;{{ my_ip_addresses }}&#34;</span>

...
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">PLAY <span style="color:#f92672">[</span>IP List Test<span style="color:#f92672">]</span> *
 TASK <span style="color:#f92672">[</span>Setting a fact <span style="color:#66d9ef">for</span> my list of IP addresses<span style="color:#f92672">]</span> ***
 ok: <span style="color:#f92672">[</span>localhost<span style="color:#f92672">]</span>
 TASK <span style="color:#f92672">[</span>Print list of IP addresses<span style="color:#f92672">]</span> *
 ok: <span style="color:#f92672">[</span>localhost<span style="color:#f92672">]</span> <span style="color:#f92672">=</span>&gt; <span style="color:#f92672">{</span>
     <span style="color:#e6db74">&#34;msg&#34;</span>: <span style="color:#f92672">[</span>
         <span style="color:#e6db74">&#34;10.10.10.0&#34;</span>,
         <span style="color:#e6db74">&#34;10.10.10.1&#34;</span>,
         <span style="color:#e6db74">&#34;10.10.10.2&#34;</span>,
         <span style="color:#e6db74">&#34;10.10.10.3&#34;</span>,
         <span style="color:#e6db74">&#34;10.10.10.4&#34;</span>,
         <span style="color:#e6db74">&#34;10.10.10.5&#34;</span>,
         <span style="color:#e6db74">&#34;10.10.10.6&#34;</span>,
         <span style="color:#e6db74">&#34;10.10.10.7&#34;</span>
     <span style="color:#f92672">]</span>
 <span style="color:#f92672">}</span>
</code></pre></div><p>That’s about it. I hope you all enjoyed this write up and now you can make a list of IP addresses from a prefix… woohoo! Thank you for reading this far.</p>
]]></content>
        </item>
        
    </channel>
</rss>
